interface VideoAnalysisData {
  results: any[];
  objectStats: Record<string, number>;
  emotionStats: Record<string, number>;
  colorStats: Record<string, number>;
  compositionStats: {
    ruleOfThirds: number;
    symmetry: number;
    depth: number;
  };
  movementStats: {
    static: number;
    slight: number;
    dynamic: number;
  };
  lightingStats: {
    dark: number;
    good: number;
    bright: number;
  };
  qualityScore: number;
  engagementScore: number;
  contentType: string;
  videoContext: string;
  videoTheme: string;
  platform: string;
  totalFrames: number;
  blurFrames: number;
  framesWithFaces: number;
  framesWithText: number;
  dominantEmotion: string;
  happyPercentage: number;
  sadPercentage: number;
  uniqueObjects: string[];
  ocrTexts: string[];
}

interface AIInsights {
  context: string;
  theme: string;
  targetAudience: string;
  uniqueRecommendations: string[];
  personalizedTips: string[];
  videoPersonality: string;
  strengths: string[];
  weaknesses: string[];
  opportunities: string[];
  creativeSuggestions: string[];
  visualAnalysis?: {
    composition: string;
    lighting: string;
    colors: string;
    movement: string;
  };
}

interface VideoFrameData {
  frame: number;
  imageData: string; // base64
}

interface UserAnswers {
  [questionId: string]: string | string[];
}

interface ContentPlan {
  title: string;
  description: string;
  goals: string[];
  targetAudience: string;
  contentStrategy: string;
  platformStrategy: {
    TikTok: {
      contentTypes: string[];
      postingSchedule: string;
      optimizationTips: string[];
    };
    Instagram: {
      contentTypes: string[];
      postingSchedule: string;
      optimizationTips: string[];
    };
    YouTube?: {
      contentTypes: string[];
      postingSchedule: string;
      optimizationTips: string[];
    };
    [key: string]: any; // For other platforms
  };
  videoSchedule: VideoSchedule[];
  contentIdeas: string[];
  hashtagStrategy: string[];
  engagementStrategy: string[];
  measurementMetrics: string[];
  timeline: {
    week1: string[];
    week2: string[];
    week3: string[];
    week4: string[];
  };
}

interface VideoSchedule {
  day: number;
  topic: string;
  whatToShow: string;
  hook: string;
  platform: string;
  duration: string;
  hashtags: string[];
}

import { contentPlanStorage } from './contentPlanStorage';

export class AIService {
  private apiKey: string | null = null;
  private baseUrl = 'https://api.openai.com/v1/chat/completions';

  constructor() {
    this.apiKey = import.meta.env.VITE_OPENAI_API_KEY || null;
    console.log('üîë AI Service initialized');
    console.log('üîë API Key status:', this.apiKey ? '‚úÖ Found' : '‚ùå Not found');
    if (this.apiKey) {
      console.log('üîë API Key preview:', this.apiKey.substring(0, 10) + '...');
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞ –∏ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
  async testAPI(): Promise<boolean> {
    if (!this.apiKey) {
      console.warn('‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return false;
    }

    try {
      console.log('üß™ Testing OpenAI API...');
      const response = await fetch(this.baseUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`
        },
        body: JSON.stringify({
          model: 'gpt-4',
          messages: [
            {
              role: 'user',
              content: '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API.'
            }
          ],
          max_tokens: 50
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå API Test failed:', response.status, errorText);
        return false;
      }

      const data = await response.json();
      console.log('‚úÖ API Test successful:', data.choices[0]?.message?.content);
      return true;
    } catch (error) {
      console.error('‚ùå API Test error:', error);
      return false;
    }
  }

  async getVideoInsights(videoData: VideoAnalysisData): Promise<AIInsights> {
    console.log('üé¨ Starting video analysis with AI...');
    
    // –°–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º API
    const apiWorking = await this.testAPI();
    
    if (!apiWorking) {
      console.warn('‚ö†Ô∏è OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É');
      return this.generateAdvancedLocalInsights(videoData);
    }

    try {
      console.log('üìä Preparing detailed analysis data...');
      console.log(`üìà Video metrics: ${videoData.totalFrames} frames, ${videoData.qualityScore}/100 quality, ${videoData.engagementScore}/100 engagement`);
      console.log(`üé≠ Content type: ${videoData.contentType}, Platform: ${videoData.platform}`);
      console.log(`üë• Faces detected: ${videoData.framesWithFaces}/${videoData.totalFrames} frames`);
      console.log(`üìù Text detected: ${videoData.framesWithText}/${videoData.totalFrames} frames`);
      console.log(`üòä Happy emotions: ${videoData.happyPercentage.toFixed(1)}%`);
      console.log(`üò¢ Sad emotions: ${videoData.sadPercentage.toFixed(1)}%`);
      console.log(`üé® Objects found: ${videoData.uniqueObjects.join(', ')}`);
      
      // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      console.log('üî¨ Technical analysis details:');
      const focusStats = { excellent: 0, good: 0, fair: 0, poor: 0 };
      const textureStats = { detailed: 0, textured: 0, smooth: 0 };
      const dynamicRangeStats = { high: 0, medium: 0, low: 0 };
      const saturationStats = { high: 0, medium: 0, low: 0 };
      const temperatureStats = { warm: 0, cool: 0, neutral: 0 };
      
      videoData.results.forEach(frame => {
        if (frame.focus) focusStats[frame.focus.quality as keyof typeof focusStats]++;
        if (frame.textures) textureStats[frame.textures.type as keyof typeof textureStats]++;
        if (frame.dynamicRange) dynamicRangeStats[frame.dynamicRange.range as keyof typeof dynamicRangeStats]++;
        if (frame.saturation) saturationStats[frame.saturation.level as keyof typeof saturationStats]++;
        if (frame.colorTemperature) temperatureStats[frame.colorTemperature.temperature as keyof typeof temperatureStats]++;
      });
      
      console.log(`üì∏ Focus quality: ${Object.entries(focusStats).sort((a, b) => b[1] - a[1])[0]?.[0] || 'unknown'}`);
      console.log(`üé® Texture type: ${Object.entries(textureStats).sort((a, b) => b[1] - a[1])[0]?.[0] || 'unknown'}`);
      console.log(`üìä Dynamic range: ${Object.entries(dynamicRangeStats).sort((a, b) => b[1] - a[1])[0]?.[0] || 'unknown'}`);
      console.log(`üåà Saturation: ${Object.entries(saturationStats).sort((a, b) => b[1] - a[1])[0]?.[0] || 'unknown'}`);
      console.log(`üå°Ô∏è Color temperature: ${Object.entries(temperatureStats).sort((a, b) => b[1] - a[1])[0]?.[0] || 'unknown'}`);
      
      const prompt = this.createAdvancedPrompt(videoData);
      console.log('üìù Generated advanced prompt for GPT-4...');
      console.log(`üìè Prompt length: ${prompt.length} characters`);
      console.log('üìã Prompt preview (first 500 chars):', prompt.substring(0, 500) + '...');
      
      const response = await fetch(this.baseUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`
        },
        body: JSON.stringify({
          model: 'gpt-4',
          messages: [
            {
              role: 'system',
              content: `–¢—ã –≤–µ–¥—É—â–∏–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π —Å 15-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. 
              –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –∏ –¥–∞–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ, –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–≤–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–¥–∏–≤—è—Ç –∫–ª–∏–µ–Ω—Ç–∞.
              
              –¢—ã –¥–æ–ª–∂–µ–Ω –¥—É–º–∞—Ç—å –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç-–º–µ–π–∫–µ—Ä —Å –º–∏–ª–ª–∏–æ–Ω–∞–º–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ –¥–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç.
              –ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º, –Ω–æ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º. –ö–∞–∂–¥—ã–π —Å–æ–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ.
              
              –ò—Å–ø–æ–ª—å–∑—É–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã, –ø—Å–∏—Ö–æ–ª–æ–≥–∏—é –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è –∏ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
              –î–∞–π —Å–æ–≤–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Å—Ç–∞–≤—è—Ç –≤–∏–¥–µ–æ –≤—ã–¥–µ–ª–∏—Ç—å—Å—è —Å—Ä–µ–¥–∏ –º–∏–ª–ª–∏–æ–Ω–æ–≤ –¥—Ä—É–≥–∏—Ö.`
            },
            {
              role: 'user',
              content: prompt
            }
          ],
          temperature: 0.9,
          max_tokens: 2000
        })
      });

      console.log('üì° API Response status:', response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå API Error:', response.status, errorText);
        throw new Error(`API –æ—à–∏–±–∫–∞: ${response.status} - ${errorText}`);
      }

      const data = await response.json();
      console.log('‚úÖ API Response received');
      console.log('üí∞ Tokens used:', data.usage);
      console.log(`üí¨ Response tokens: ${data.usage?.total_tokens || 'unknown'}`);
      console.log(`üí∞ Estimated cost: $${((data.usage?.total_tokens || 0) * 0.00003).toFixed(4)}`);
      
      const content = data.choices[0]?.message?.content;
      
      if (!content) {
        throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API');
      }

      console.log('üìÑ Raw AI response length:', content.length);
      console.log('üìÑ Response preview (first 300 chars):', content.substring(0, 300) + '...');

      try {
        const insights = JSON.parse(content);
        console.log('‚úÖ JSON parsed successfully');
        console.log(`üéØ Generated ${insights.uniqueRecommendations?.length || 0} unique recommendations`);
        console.log(`üí° Generated ${insights.personalizedTips?.length || 0} personalized tips`);
        console.log(`üöÄ Generated ${insights.creativeSuggestions?.length || 0} creative suggestions`);
        return this.validateAdvancedInsights(insights);
      } catch (parseError) {
        console.error('‚ùå JSON parse error:', parseError);
        console.log('üìÑ Raw content:', content.substring(0, 500) + '...');
        return this.generateAdvancedLocalInsights(videoData);
      }

    } catch (error) {
      console.error('‚ùå Error getting AI insights:', error);
      return this.generateAdvancedLocalInsights(videoData);
    }
  }

  // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ GPT-4 Vision
  async analyzeVideoWithVision(videoFrames: VideoFrameData[]): Promise<AIInsights> {
    console.log('üé¨ Starting GPT-4 Vision analysis...');
    console.log(`üìä Total frames received: ${videoFrames.length}`);
    
    if (!this.apiKey) {
      console.warn('‚ùå OpenAI API key not found, using local analysis');
      return this.generateAdvancedLocalInsights({
        results: [],
        objectStats: {},
        emotionStats: {},
        colorStats: {},
        compositionStats: { ruleOfThirds: 0, symmetry: 0, depth: 0 },
        movementStats: { static: 0, slight: 0, dynamic: 0 },
        lightingStats: { dark: 0, good: 0, bright: 0 },
        qualityScore: 0,
        engagementScore: 0,
        contentType: 'general',
        videoContext: 'general',
        videoTheme: 'entertainment',
        platform: 'general',
        totalFrames: 0,
        blurFrames: 0,
        framesWithFaces: 0,
        framesWithText: 0,
        dominantEmotion: 'neutral',
        happyPercentage: 0,
        sadPercentage: 0,
        uniqueObjects: [],
        ocrTexts: []
      });
    }

    try {
      // –í—ã–±–∏—Ä–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –∫–∞–¥—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–∫–∞–∂–¥—ã–π 5-–π –∫–∞–¥—Ä)
      const keyFrames = videoFrames.filter((_, index) => index % 5 === 0).slice(0, 10);
      console.log(`üéØ Selected ${keyFrames.length} key frames for analysis`);
      
      const messages = [
        {
          role: 'system',
          content: `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –≤–∏–¥–µ–æ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π —Å 10-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. 
          –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–¥—Ä—ã –≤–∏–¥–µ–æ –∏ –¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ, –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞.

          –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–∂–¥—ã–π –∞—Å–ø–µ–∫—Ç:
          - –í–∏–∑—É–∞–ª—å–Ω–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è –∏ –∫–∞–¥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
          - –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ –∏ –æ—Å–≤–µ—â–µ–Ω–∏–µ
          - –î–≤–∏–∂–µ–Ω–∏–µ –∏ –¥–∏–Ω–∞–º–∏–∫–∞
          - –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ
          - –û–±—ä–µ–∫—Ç—ã –∏ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–∞–¥—Ä–µ
          - –¢–µ–∫—Å—Ç –∏ –Ω–∞–¥–ø–∏—Å–∏
          - –û–±—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Å—Ç–∏–ª—å

          –î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–∏–¥–µ–æ. –ë—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º.`
        },
        {
          role: 'user',
          content: [
            {
              type: 'text',
              text: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–∏ –∫–∞–¥—Ä—ã –∏–∑ –≤–∏–¥–µ–æ –∏ —Å–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:

{
  "context": "–∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –≤–∏–¥–µ–æ",
  "theme": "–æ—Å–Ω–æ–≤–Ω–∞—è –∏–¥–µ—è/—Ç–µ–º–∞ –≤–∏–¥–µ–æ", 
  "targetAudience": "—Ç–æ—á–Ω–∞—è —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è",
  "videoPersonality": "–ª–∏—á–Ω–æ—Å—Ç—å/—Ö–∞—Ä–∞–∫—Ç–µ—Ä –≤–∏–¥–µ–æ",
  "strengths": ["3-4 —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ"],
  "weaknesses": ["3-4 —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã"],
  "opportunities": ["3-4 –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞"],
  "uniqueRecommendations": ["5-7 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö, –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤"],
  "personalizedTips": ["5-7 –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤"],
  "creativeSuggestions": ["3-4 –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –∏–¥–µ–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è"],
  "visualAnalysis": {
    "composition": "–∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏",
    "lighting": "–∞–Ω–∞–ª–∏–∑ –æ—Å–≤–µ—â–µ–Ω–∏—è", 
    "colors": "–∞–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤",
    "movement": "–∞–Ω–∞–ª–∏–∑ –¥–≤–∏–∂–µ–Ω–∏—è"
  }
}

–ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º. –ö–∞–∂–¥—ã–π —Å–æ–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ.`
            },
            ...keyFrames.map(frame => ({
              type: 'image_url',
              image_url: {
                url: frame.imageData,
                detail: 'high'
              }
            }))
          ]
        }
      ];

      console.log('üì° Sending request to GPT-4 Vision API...');
      console.log(`üñºÔ∏è Sending ${keyFrames.length} frames`);
      
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`
        },
        body: JSON.stringify({
          model: 'gpt-4-vision-preview',
          messages,
          max_tokens: 2000,
          temperature: 0.9
        })
      });

      console.log('üì° Vision API Response status:', response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Vision API Error:', response.status, errorText);
        throw new Error(`Vision API –æ—à–∏–±–∫–∞: ${response.status} - ${errorText}`);
      }

      const data = await response.json();
      console.log('‚úÖ Vision API Response received');
      console.log('üí∞ Vision API Tokens used:', data.usage);
      
      const content = data.choices[0]?.message?.content;
      
      if (!content) {
        throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Vision API');
      }

      console.log('üìÑ Raw Vision AI response length:', content.length);

      try {
        const insights = JSON.parse(content);
        console.log('‚úÖ Vision JSON parsed successfully');
        return this.validateAdvancedInsights(insights);
      } catch (parseError) {
        console.error('‚ùå Vision JSON parse error:', parseError);
        console.log('üìÑ Raw Vision content:', content.substring(0, 500) + '...');
        return this.generateAdvancedLocalInsights({
          results: [],
          objectStats: {},
          emotionStats: {},
          colorStats: {},
          compositionStats: { ruleOfThirds: 0, symmetry: 0, depth: 0 },
          movementStats: { static: 0, slight: 0, dynamic: 0 },
          lightingStats: { dark: 0, good: 0, bright: 0 },
          qualityScore: 0,
          engagementScore: 0,
          contentType: 'general',
          videoContext: 'general',
          videoTheme: 'entertainment',
          platform: 'general',
          totalFrames: 0,
          blurFrames: 0,
          framesWithFaces: 0,
          framesWithText: 0,
          dominantEmotion: 'neutral',
          happyPercentage: 0,
          sadPercentage: 0,
          uniqueObjects: [],
          ocrTexts: []
        });
      }

    } catch (error) {
      console.error('‚ùå Error in Vision analysis:', error);
      return this.generateAdvancedLocalInsights({
        results: [],
        objectStats: {},
        emotionStats: {},
        colorStats: {},
        compositionStats: { ruleOfThirds: 0, symmetry: 0, depth: 0 },
        movementStats: { static: 0, slight: 0, dynamic: 0 },
        lightingStats: { dark: 0, good: 0, bright: 0 },
        qualityScore: 0,
        engagementScore: 0,
        contentType: 'general',
        videoContext: 'general',
        videoTheme: 'entertainment',
        platform: 'general',
        totalFrames: 0,
        blurFrames: 0,
        framesWithFaces: 0,
        framesWithText: 0,
        dominantEmotion: 'neutral',
        happyPercentage: 0,
        sadPercentage: 0,
        uniqueObjects: [],
        ocrTexts: []
      });
    }
  }

  async generateContentPlan(userAnswers: UserAnswers): Promise<ContentPlan> {
    console.log('üìã Starting content plan generation...');
    console.log('üìù User answers:', userAnswers);
    
    // –°–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º API
    const apiWorking = await this.testAPI();
    
    let contentPlan: ContentPlan;
    
    if (!apiWorking) {
      console.warn('‚ö†Ô∏è OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É');
      contentPlan = this.generateLocalContentPlan(userAnswers);
    } else {
      try {
        const prompt = this.createContentPlanPrompt(userAnswers);
        console.log('üìù Generated content plan prompt...');
        console.log(`üìè Prompt length: ${prompt.length} characters`);
        console.log('üìã Prompt preview:', prompt.substring(0, 500) + '...');
        
        const response = await fetch(this.baseUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${this.apiKey}`
          },
          body: JSON.stringify({
            model: 'gpt-4',
            messages: [
              {
                role: 'system',
                content: `–¢—ã –≤–µ–¥—É—â–∏–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–æ–≤ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π —Å 10-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã —Å –±—Ä–µ–Ω–¥–∞–º–∏ –∏ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–∞–º–∏.
                
                –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π, –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞.
                
                –¢—ã –¥–æ–ª–∂–µ–Ω –¥—É–º–∞—Ç—å –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç-—Å—Ç—Ä–∞—Ç–µ–≥ –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–ª–∞–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç.
                –ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º. –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–ª–∞–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
                
                –ò—Å–ø–æ–ª—å–∑—É–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã, –ø—Å–∏—Ö–æ–ª–æ–≥–∏—é –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
                –°–æ–∑–¥–∞–π –ø–ª–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –∫–ª–∏–µ–Ω—Ç—É –¥–æ—Å—Ç–∏—á—å –µ–≥–æ —Ü–µ–ª–µ–π –∏ –≤—ã–¥–µ–ª–∏—Ç—å—Å—è —Å—Ä–µ–¥–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤.`
              },
              {
                role: 'user',
                content: prompt
              }
            ],
            temperature: 0.8,
            max_tokens: 4000
          })
        });

        console.log('üì° API Response status:', response.status);
        
        if (!response.ok) {
          const errorText = await response.text();
          console.error('‚ùå API Error:', response.status, errorText);
          throw new Error(`API –æ—à–∏–±–∫–∞: ${response.status} - ${errorText}`);
        }

        const data = await response.json();
        const content = data.choices[0]?.message?.content;
        
        if (!content) {
          console.error('‚ùå No content in API response');
          throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API');
        }

        console.log('‚úÖ Content plan generated successfully');
        console.log('üìã Content plan length:', content.length);
        console.log('üìã Content plan preview:', content.substring(0, 1000) + '...');
        
        contentPlan = this.parseContentPlanResponse(content);
      } catch (error) {
        console.error('‚ùå Error generating content plan:', error);
        contentPlan = this.generateLocalContentPlan(userAnswers);
      }
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω
    try {
      const platforms = Array.isArray(userAnswers.platforms) ? userAnswers.platforms : ['TikTok'];
      const goals = Array.isArray(userAnswers.goals) ? userAnswers.goals : ['–£–≤–µ–ª–∏—á–∏—Ç—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å'];
      
      const title = `–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –¥–ª—è ${platforms.join(', ')}`;
      const description = `–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è –≤ ${platforms.join(', ')} —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ ${goals.join(', ')}`;
      const tags = [...platforms, ...goals.map(goal => goal.toLowerCase())];
      
      const savedPlan = contentPlanStorage.savePlan(
        title,
        description,
        userAnswers,
        contentPlan,
        tags
      );
      
      console.log('üíæ Content plan saved successfully:', savedPlan.id);
    } catch (error) {
      console.error('‚ùå Error saving content plan:', error);
    }

    return contentPlan;
  }

  private createStructuredResponse(content: string): AIInsights {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    const context = content.includes('–∫–æ–Ω—Ç–µ–∫—Å—Ç') ? content.split('–∫–æ–Ω—Ç–µ–∫—Å—Ç')[1]?.split('.')[0] : '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –≤–∏–¥–µ–æ–∫–æ–Ω—Ç–µ–Ω—Ç';
    const theme = content.includes('—Ç–µ–º–∞') ? content.split('—Ç–µ–º–∞')[1]?.split('.')[0] : '–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç';
    
    return {
      context: context || '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –≤–∏–¥–µ–æ–∫–æ–Ω—Ç–µ–Ω—Ç',
      theme: theme || '–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç',
      targetAudience: '–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è',
      videoPersonality: '–î–∏–Ω–∞–º–∏—á–Ω—ã–π –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π',
      strengths: ['–•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ', '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç'],
      weaknesses: ['–ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å'],
      opportunities: ['–ë–æ–ª—å—à–æ–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª'],
      uniqueRecommendations: ['–î–æ–±–∞–≤—å—Ç–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏', '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–µ —Ä–∞–∫—É—Ä—Å—ã'],
      personalizedTips: ['–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç—Ä–µ–Ω–¥—ã', '–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ'],
      creativeSuggestions: ['–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ', '–°–æ–∑–¥–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å']
    };
  }

  private createAdvancedPrompt(videoData: VideoAnalysisData): string {
    const emotionAnalysis = this.analyzeEmotions(videoData.emotionStats);
    const objectAnalysis = this.analyzeObjects(videoData.objectStats);
    const colorAnalysis = this.analyzeColors(videoData.colorStats);
    const compositionAnalysis = this.analyzeComposition(videoData.compositionStats);
    const movementAnalysis = this.analyzeMovement(videoData.movementStats);
    const lightingAnalysis = this.analyzeLighting(videoData.lightingStats);
    const qualityAnalysis = this.analyzeQuality(videoData);
    const contentAnalysis = this.analyzeContent(videoData);
    
    // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const technicalAnalysis = this.analyzeTechnicalDetails(videoData);
    
    return `
üé¨ –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –í–ò–î–ï–û –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –£–ù–ò–ö–ê–õ–¨–ù–´–• –°–û–í–ï–¢–û–í

üìä –û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò:
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${videoData.totalFrames} –∫–∞–¥—Ä–æ–≤ (${Math.round(videoData.totalFrames/30)} —Å–µ–∫)
‚Ä¢ –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: ${videoData.qualityScore}/100
‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏: ${videoData.engagementScore}/100
‚Ä¢ –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${videoData.contentType}
‚Ä¢ –¶–µ–ª–µ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${videoData.platform}

üé≠ –ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –≠–ú–û–¶–ò–ô:
${emotionAnalysis}

üé® –í–ò–ó–£–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –û–ë–™–ï–ö–¢–û–í:
${objectAnalysis}

üåà –¶–í–ï–¢–û–í–ê–Ø –ü–°–ò–•–û–õ–û–ì–ò–Ø:
${colorAnalysis}

üìê –ö–û–ú–ü–û–ó–ò–¶–ò–û–ù–ù–´–ô –ê–ù–ê–õ–ò–ó:
${compositionAnalysis}

üé¨ –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –î–í–ò–ñ–ï–ù–ò–Ø:
${movementAnalysis}

üí° –ê–ù–ê–õ–ò–ó –û–°–í–ï–©–ï–ù–ò–Ø –ò –ê–¢–ú–û–°–§–ï–†–´:
${lightingAnalysis}

üìê –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê:
${qualityAnalysis}

üé¨ –ö–û–ù–¢–ï–ù–¢–ù–´–ô –ê–ù–ê–õ–ò–ó:
${contentAnalysis}

üî¨ –î–ï–¢–ê–õ–¨–ù–´–ô –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:
${technicalAnalysis}

üìù –¢–ï–ö–°–¢–û–í–´–ô –ö–û–ù–¢–ï–ù–¢:
${videoData.ocrTexts.length > 0 ? videoData.ocrTexts.slice(0, 3).join(' | ') : '–¢–µ–∫—Å—Ç –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω'}

üéØ –ó–ê–î–ê–ß–ê: –¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å 15-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –≤–∏–¥–µ–æ –∏ —Å–æ–∑–¥–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π, –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:

{
  "context": "–∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –∏ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–≥–æ –≤ –≤–∏–¥–µ–æ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
  "theme": "–≥–ª—É–±–æ–∫–∞—è –∏–¥–µ—è/—Ç–µ–º–∞ –≤–∏–¥–µ–æ —Å —É—á–µ—Ç–æ–º –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è",
  "targetAudience": "—Ç–æ—á–Ω–∞—è —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è —Å —É—á–µ—Ç–æ–º –¥–µ–º–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –ø—Å–∏—Ö–æ–≥—Ä–∞—Ñ–∏–∏",
  "videoPersonality": "—É–Ω–∏–∫–∞–ª—å–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å/—Ö–∞—Ä–∞–∫—Ç–µ—Ä –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–¥–µ–ª—è–µ—Ç –µ–≥–æ —Å—Ä–µ–¥–∏ –¥—Ä—É–≥–∏—Ö",
  "strengths": ["3-4 —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞"],
  "weaknesses": ["3-4 —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –∏—Ö –≤–ª–∏—è–Ω–∏—è"],
  "opportunities": ["3-4 —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞ –∏ —Ä–∞–∑–≤–∏—Ç–∏—è"],
  "uniqueRecommendations": ["5-7 –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö, –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–¥–∏–≤—è—Ç –∫–ª–∏–µ–Ω—Ç–∞"],
  "personalizedTips": ["5-7 –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –¥–µ—Ç–∞–ª–µ–π –∞–Ω–∞–ª–∏–∑–∞"],
  "creativeSuggestions": ["3-4 –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–¥–µ–ª—è—Ç –≤–∏–¥–µ–æ"]
}

üé® –ö–†–ï–ê–¢–ò–í–ù–´–ï –ü–†–ê–í–ò–õ–ê:
1. –ö–∞–∂–¥—ã–π —Å–æ–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ
2. –ò—Å–ø–æ–ª—å–∑—É–π –¥–∞–Ω–Ω—ã–µ –æ —Ü–≤–µ—Ç–∞—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è
3. –£—á–∏—Ç—ã–≤–∞–π –∫–æ–º–ø–æ–∑–∏—Ü–∏—é –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–≤–∏–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏–∫–∏
5. –î—É–º–∞–π –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç-–º–µ–π–∫–µ—Ä —Å –º–∏–ª–ª–∏–æ–Ω–∞–º–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
6. –°–æ–∑–¥–∞–≤–∞–π —Å–æ–≤–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Å—Ç–∞–≤—è—Ç –≤–∏–¥–µ–æ –≤—ã–¥–µ–ª–∏—Ç—å—Å—è —Å—Ä–µ–¥–∏ –º–∏–ª–ª–∏–æ–Ω–æ–≤ –¥—Ä—É–≥–∏—Ö
7. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—é –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã
8. –ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º, –Ω–æ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º
9. –ö–∞–∂–¥—ã–π —Å–æ–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –≤—ã–ø–æ–ª–Ω–∏–º—ã–º
10. –£–¥–∏–≤–∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º–∏, –Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º–∏ –∏–¥–µ—è–º–∏
11. –£—á–∏—Ç—ã–≤–∞–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤
12. –î–∞–π —Å–æ–≤–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –º–∏—Ä–µ
`;
  }

  private analyzeEmotions(emotionStats: Record<string, number>): string {
    const total = Object.values(emotionStats).reduce((a, b) => a + b, 0);
    const emotions = Object.entries(emotionStats)
      .sort((a, b) => b[1] - a[1])
      .map(([emotion, count]) => `${emotion}: ${Math.round(count/total*100)}%`)
      .join(', ');
    
    const dominant = Object.entries(emotionStats).sort((a, b) => b[1] - a[1])[0];
    
    let analysis = `–î–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è —ç–º–æ—Ü–∏—è: ${dominant?.[0] || '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è'}\n`;
    analysis += `–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: ${emotions}\n`;
    
    if (emotionStats.happy > emotionStats.sad) {
      analysis += '‚úÖ –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ç–æ–Ω –ø—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç';
    } else if (emotionStats.sad > emotionStats.happy) {
      analysis += '‚ö†Ô∏è –ü—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –≥—Ä—É—Å—Ç–Ω—ã–µ —ç–º–æ—Ü–∏–∏';
    } else {
      analysis += 'üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω';
    }
    
    return analysis;
  }

  private analyzeObjects(objectStats: Record<string, number>): string {
    const objects = Object.entries(objectStats)
      .sort((a, b) => b[1] - a[1])
      .map(([obj, count]) => `${obj} (${count} –∫–∞–¥—Ä–æ–≤)`)
      .join(', ');
    
    let analysis = `–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã: ${objects}\n`;
    
    if (objectStats.person) {
      analysis += 'üë• –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n';
    }
    if (objectStats.sky) {
      analysis += 'üå§Ô∏è –£–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω—ã\n';
    }
    if (objectStats.vegetation) {
      analysis += 'üåø –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã\n';
    }
    
    const diversity = Object.keys(objectStats).length;
    if (diversity < 3) {
      analysis += '‚ö†Ô∏è –ú–∞–ª–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –≤ –∫–∞–¥—Ä–µ';
    } else {
      analysis += '‚úÖ –•–æ—Ä–æ—à–µ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤';
    }
    
    return analysis;
  }

  private analyzeColors(colorStats: Record<string, number>): string {
    if (Object.keys(colorStats).length === 0) {
      return "–¶–≤–µ—Ç–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω";
    }
    
    const sortedColors = Object.entries(colorStats)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 3);
    
    const colorNames: Record<string, string> = {
      red: '–∫—Ä–∞—Å–Ω—ã–π',
      green: '–∑–µ–ª–µ–Ω—ã–π',
      blue: '—Å–∏–Ω–∏–π',
      neutral: '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π'
    };
    
    return sortedColors.map(([color, count]) => 
      `- ${colorNames[color] || color}: ${count} –∫–∞–¥—Ä–æ–≤`
    ).join('\n');
  }

  private analyzeComposition(compositionStats: { ruleOfThirds: number; symmetry: number; depth: number }): string {
    const total = compositionStats.ruleOfThirds + compositionStats.symmetry + compositionStats.depth;
    if (total === 0) return "–ö–æ–º–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω";
    
    const ruleOfThirdsPercent = Math.round((compositionStats.ruleOfThirds / total) * 100);
    const symmetryPercent = Math.round((compositionStats.symmetry / total) * 100);
    const depthPercent = Math.round((compositionStats.depth / total) * 100);
    
    return `- –ü—Ä–∞–≤–∏–ª–æ —Ç—Ä–µ—Ç–µ–π: ${ruleOfThirdsPercent}%\n- –°–∏–º–º–µ—Ç—Ä–∏—è: ${symmetryPercent}%\n- –ì–ª—É–±–∏–Ω–∞: ${depthPercent}%`;
  }

  private analyzeMovement(movementStats: { static: number; slight: number; dynamic: number }): string {
    const total = movementStats.static + movementStats.slight + movementStats.dynamic;
    if (total === 0) return "–ê–Ω–∞–ª–∏–∑ –¥–≤–∏–∂–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω";
    
    const staticPercent = Math.round((movementStats.static / total) * 100);
    const slightPercent = Math.round((movementStats.slight / total) * 100);
    const dynamicPercent = Math.round((movementStats.dynamic / total) * 100);
    
    let movementType = "—Å—Ç–∞—Ç–∏—á–Ω–æ–µ";
    if (dynamicPercent > 50) movementType = "–¥–∏–Ω–∞–º–∏—á–Ω–æ–µ";
    else if (slightPercent > 30) movementType = "—É–º–µ—Ä–µ–Ω–Ω–æ –ø–æ–¥–≤–∏–∂–Ω–æ–µ";
    
    return `- –°—Ç–∞—Ç–∏—á–Ω—ã–µ –∫–∞–¥—Ä—ã: ${staticPercent}%\n- –õ–µ–≥–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ: ${slightPercent}%\n- –î–∏–Ω–∞–º–∏—á–Ω—ã–µ –∫–∞–¥—Ä—ã: ${dynamicPercent}%\n- –¢–∏–ø: ${movementType}`;
  }

  private analyzeLighting(lightingStats: { dark: number; good: number; bright: number }): string {
    const total = lightingStats.dark + lightingStats.good + lightingStats.bright;
    if (total === 0) return "–ê–Ω–∞–ª–∏–∑ –æ—Å–≤–µ—â–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω";
    
    const darkPercent = Math.round((lightingStats.dark / total) * 100);
    const goodPercent = Math.round((lightingStats.good / total) * 100);
    const brightPercent = Math.round((lightingStats.bright / total) * 100);
    
    let lightingQuality = "—Ö–æ—Ä–æ—à–µ–µ";
    if (darkPercent > 50) lightingQuality = "—Ç–µ–º–Ω–æ–µ";
    else if (brightPercent > 50) lightingQuality = "—è—Ä–∫–æ–µ";
    
    return `- –¢–µ–º–Ω—ã–µ –∫–∞–¥—Ä—ã: ${darkPercent}%\n- –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ: ${goodPercent}%\n- –Ø—Ä–∫–∏–µ –∫–∞–¥—Ä—ã: ${brightPercent}%\n- –ö–∞—á–µ—Å—Ç–≤–æ: ${lightingQuality}`;
  }

  private analyzeQuality(videoData: VideoAnalysisData): string {
    let analysis = '';
    
    if (videoData.blurFrames > videoData.totalFrames * 0.3) {
      analysis += 'üì∏ –ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–æ–π\n';
    }
    if (videoData.framesWithFaces < videoData.totalFrames * 0.5) {
      analysis += 'üë§ –ú–∞–ª–æ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞\n';
    }
    if (videoData.framesWithText < videoData.totalFrames * 0.2) {
      analysis += 'üìù –ú–∞–ª–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n';
    }
    
    if (videoData.qualityScore > 80) {
      analysis += '‚úÖ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ';
    } else if (videoData.qualityScore > 60) {
      analysis += '‚ö†Ô∏è –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è';
    } else {
      analysis += '‚ùå –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞';
    }
    
    return analysis;
  }

  private analyzeContent(videoData: VideoAnalysisData): string {
    let analysis = '';
    
    switch (videoData.contentType) {
      case 'person-focused':
        analysis += 'üé≠ –§–æ–∫—É—Å –Ω–∞ –ª—é–¥—è—Ö –∏ —ç–º–æ—Ü–∏—è—Ö\n';
        analysis += 'üí° –û—Ç–ª–∏—á–Ω–æ –¥–ª—è –ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π –∏ –≤–ª–æ–≥–æ–≤';
        break;
      case 'text-heavy':
        analysis += 'üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç\n';
        analysis += 'üí° –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π';
        break;
      case 'outdoor':
        analysis += 'üåç –£–ª–∏—á–Ω—ã–µ/–ø—Ä–∏—Ä–æ–¥–Ω—ã–µ —Å—Ü–µ–Ω—ã\n';
        analysis += 'üí° –û—Ç–ª–∏—á–Ω–æ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π';
        break;
      default:
        analysis += 'üé¨ –û–±—â–∏–π —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç\n';
        analysis += 'üí° –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç';
    }
    
    if (videoData.platform === 'tiktok') {
      analysis += 'üì± –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è TikTok';
    } else if (videoData.platform === 'instagram') {
      analysis += 'üì∏ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è Instagram Reels';
    }
    
    return analysis;
  }

  private analyzeTechnicalDetails(videoData: VideoAnalysisData): string {
    const { results, totalFrames, blurFrames } = videoData;
    // –ê–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const focusStats = { excellent: 0, good: 0, fair: 0, poor: 0 };
    const textureStats = { detailed: 0, textured: 0, smooth: 0 };
    const dynamicRangeStats = { high: 0, medium: 0, low: 0 };
    const saturationStats = { high: 0, medium: 0, low: 0 };
    const temperatureStats = { warm: 0, cool: 0, neutral: 0 };
    results.forEach(frame => {
      if (frame.focus) focusStats[frame.focus.quality as keyof typeof focusStats]++;
      if (frame.textures) textureStats[frame.textures.type as keyof typeof textureStats]++;
      if (frame.dynamicRange) dynamicRangeStats[frame.dynamicRange.range as keyof typeof dynamicRangeStats]++;
      if (frame.saturation) saturationStats[frame.saturation.level as keyof typeof saturationStats]++;
      if (frame.colorTemperature) temperatureStats[frame.colorTemperature.temperature as keyof typeof temperatureStats]++;
    });
    let technicalAnalysis = `üî¨ –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:\n`;
    // –ê–Ω–∞–ª–∏–∑ —Ñ–æ–∫—É—Å–∞
    const dominantFocus = Object.entries(focusStats).sort((a, b) => b[1] - a[1])[0];
    technicalAnalysis += `üì∏ –§–û–ö–£–°: ${dominantFocus[0]} (${Math.round(dominantFocus[1]/totalFrames*100)}% –∫–∞–¥—Ä–æ–≤)\n`;
    // –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç—É—Ä
    const dominantTexture = Object.entries(textureStats).sort((a, b) => b[1] - a[1])[0];
    technicalAnalysis += `üé® –¢–ï–ö–°–¢–£–†–´: ${dominantTexture[0]} (${Math.round(dominantTexture[1]/totalFrames*100)}% –∫–∞–¥—Ä–æ–≤)\n`;
    // –ê–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    const dominantRange = Object.entries(dynamicRangeStats).sort((a, b) => b[1] - a[1])[0];
    technicalAnalysis += `üìä –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô –î–ò–ê–ü–ê–ó–û–ù: ${dominantRange[0]} (${Math.round(dominantRange[1]/totalFrames*100)}% –∫–∞–¥—Ä–æ–≤)\n`;
    // –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏
    const dominantSaturation = Object.entries(saturationStats).sort((a, b) => b[1] - a[1])[0];
    technicalAnalysis += `üåà –ù–ê–°–´–©–ï–ù–ù–û–°–¢–¨: ${dominantSaturation[0]} (${Math.round(dominantSaturation[1]/totalFrames*100)}% –∫–∞–¥—Ä–æ–≤)\n`;
    // –ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    const dominantTemperature = Object.entries(temperatureStats).sort((a, b) => b[1] - a[1])[0];
    technicalAnalysis += `üå°Ô∏è –¶–í–ï–¢–û–í–ê–Ø –¢–ï–ú–ü–ï–†–ê–¢–£–†–ê: ${dominantTemperature[0]} (${Math.round(dominantTemperature[1]/totalFrames*100)}% –∫–∞–¥—Ä–æ–≤)\n`;
    // –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º—ã—Ç–∏—è
    const blurPercentage = Math.round(blurFrames/totalFrames*100);
    technicalAnalysis += `üìâ –†–ê–ó–ú–´–¢–ò–ï: ${blurPercentage}% –∫–∞–¥—Ä–æ–≤ –∏–º–µ—é—Ç –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ\n`;
    return technicalAnalysis;
  }

  private validateAdvancedInsights(insights: any): AIInsights {
    return {
      context: insights.context || '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –≤–∏–¥–µ–æ–∫–æ–Ω—Ç–µ–Ω—Ç',
      theme: insights.theme || '–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç',
      targetAudience: insights.targetAudience || '–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è',
      videoPersonality: insights.videoPersonality || '–î–∏–Ω–∞–º–∏—á–Ω—ã–π –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π',
      strengths: Array.isArray(insights.strengths) ? insights.strengths : ['–•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ'],
      weaknesses: Array.isArray(insights.weaknesses) ? insights.weaknesses : ['–ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å'],
      opportunities: Array.isArray(insights.opportunities) ? insights.opportunities : ['–ë–æ–ª—å—à–æ–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª'],
      uniqueRecommendations: Array.isArray(insights.uniqueRecommendations) ? insights.uniqueRecommendations : ['–î–æ–±–∞–≤—å—Ç–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏'],
      personalizedTips: Array.isArray(insights.personalizedTips) ? insights.personalizedTips : ['–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç—Ä–µ–Ω–¥—ã'],
      creativeSuggestions: Array.isArray(insights.creativeSuggestions) ? insights.creativeSuggestions : ['–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ']
    };
  }

  private generateAdvancedLocalInsights(videoData: VideoAnalysisData): AIInsights {
    const { contentType, platform, uniqueObjects, emotionStats, qualityScore, engagementScore, totalFrames, blurFrames, framesWithFaces } = videoData;
    
    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
    let context = this.generateUniqueContext(videoData);
    let theme = this.generateUniqueTheme(videoData);
    let targetAudience = this.generateTargetAudience(videoData);
    let videoPersonality = this.generateVideoPersonality(videoData);
    
    const strengths = this.generateStrengths(videoData);
    const weaknesses = this.generateWeaknesses(videoData);
    const opportunities = this.generateOpportunities(videoData);
    const uniqueRecommendations = this.generateUniqueRecommendations(videoData);
    const personalizedTips = this.generatePersonalizedTips(videoData);
    const creativeSuggestions = this.generateCreativeSuggestions(videoData);

    return {
      context,
      theme,
      targetAudience,
      videoPersonality,
      strengths,
      weaknesses,
      opportunities,
      uniqueRecommendations,
      personalizedTips,
      creativeSuggestions
    };
  }

  private generateUniqueContext(videoData: VideoAnalysisData): string {
    const { contentType, platform, uniqueObjects, emotionStats, totalFrames, colorStats, movementStats, lightingStats } = videoData;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É
    const dominantColor = Object.entries(colorStats).sort((a, b) => b[1] - a[1])[0]?.[0];
    const isDynamic = movementStats.dynamic > movementStats.static;
    const isBright = lightingStats.bright > lightingStats.dark;
    
    if (contentType === 'person-focused' && emotionStats.happy > emotionStats.sad) {
      return isDynamic ? '–î–∏–Ω–∞–º–∏—á–Ω—ã–π –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –≤–ª–æ–≥ —Å —è—Ä–∫–∏–º–∏ —ç–º–æ—Ü–∏—è–º–∏' : '–¢–µ–ø–ª—ã–π –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –≤–ª–æ–≥ —Å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º';
    } else if (contentType === 'person-focused' && emotionStats.sad > emotionStats.happy) {
      return '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —Å –≥–ª—É–±–æ–∫–∏–º –ª–∏—á–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º';
    } else if (uniqueObjects.includes('sky') && uniqueObjects.includes('vegetation')) {
      return dominantColor === 'green' ? '–ü—Ä–∏—Ä–æ–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –∑–µ–ª–µ–Ω—ã–º–∏ –ø–µ–π–∑–∞–∂–∞–º–∏' : '–£–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω—ã —Å –ø—Ä–∏—Ä–æ–¥–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏';
    } else if (uniqueObjects.includes('person') && totalFrames < 180) {
      return isDynamic ? '–ö–æ—Ä–æ—Ç–∫–∏–π –¥–∏–Ω–∞–º–∏—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –¥–≤–∏–∂–µ–Ω–∏–µ–º' : '–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º';
    } else if (isBright && dominantColor === 'blue') {
      return '–Ø—Ä–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å —Å–∏–Ω–∏–º–∏ —Ç–æ–Ω–∞–º–∏ –∏ —Ö–æ—Ä–æ—à–∏–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º';
    } else {
      return '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –≤–∏–¥–µ–æ–∫–æ–Ω—Ç–µ–Ω—Ç —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º';
    }
  }

  private generateUniqueTheme(videoData: VideoAnalysisData): string {
    const { contentType, platform, uniqueObjects } = videoData;
    
    if (contentType === 'person-focused') {
      return '–ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏';
    } else if (uniqueObjects.includes('sky') && uniqueObjects.includes('vegetation')) {
      return '–ü—Ä–∏—Ä–æ–¥–Ω–∞—è –∫—Ä–∞—Å–æ—Ç–∞ –∏ —É–ª–∏—á–Ω—ã–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è';
    } else if (platform === 'tiktok') {
      return '–¢—Ä–µ–Ω–¥–æ–≤—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è';
    } else {
      return '–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤–∏–¥–µ–æ';
    }
  }

  private generateTargetAudience(videoData: VideoAnalysisData): string {
    const { contentType, platform, emotionStats } = videoData;
    
    if (contentType === 'person-focused' && emotionStats.happy > emotionStats.sad) {
      return '–ú–æ–ª–æ–¥—ã–µ –ª—é–¥–∏, –∏—â—É—â–∏–µ –ø–æ–∑–∏—Ç–∏–≤–∞ –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è';
    } else if (contentType === 'person-focused' && emotionStats.sad > emotionStats.happy) {
      return '–õ—é–¥–∏, —Ü–µ–Ω—è—â–∏–µ –≥–ª—É–±–∏–Ω—É –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏';
    } else if (platform === 'tiktok') {
      return '–ü–æ–∫–æ–ª–µ–Ω–∏–µ Z, –ª—é–±—è—â–µ–µ –±—ã—Å—Ç—Ä—ã–µ —Ç—Ä–µ–Ω–¥—ã';
    } else {
      return '–®–∏—Ä–æ–∫–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∞—è—Å—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º';
    }
  }

  private generateVideoPersonality(videoData: VideoAnalysisData): string {
    const { emotionStats, qualityScore, engagementScore } = videoData;
    
    if (emotionStats.happy > emotionStats.sad && qualityScore > 80) {
      return '–Ø—Ä–∫–∏–π, –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π';
    } else if (emotionStats.sad > emotionStats.happy) {
      return '–ì–ª—É–±–æ–∫–∏–π, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏ –∑–∞–¥—É–º—á–∏–≤—ã–π';
    } else if (engagementScore > 70) {
      return '–î–∏–Ω–∞–º–∏—á–Ω—ã–π, —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π';
    } else {
      return '–°–ø–æ–∫–æ–π–Ω—ã–π, —Å–æ–∑–µ—Ä—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∏ –º–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω—ã–π';
    }
  }

  private generateStrengths(videoData: VideoAnalysisData): string[] {
    const strengths: string[] = [];
    const { emotionStats, qualityScore, engagementScore, uniqueObjects } = videoData;
    
    if (emotionStats.happy > emotionStats.sad) {
      strengths.push('–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –∞—É–¥–∏—Ç–æ—Ä–∏—é');
    }
    if (qualityScore > 80) {
      strengths.push('–í—ã—Å–æ–∫–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ');
    }
    if (engagementScore > 70) {
      strengths.push('–û—Ç–ª–∏—á–Ω–∞—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å –∑—Ä–∏—Ç–µ–ª–µ–π');
    }
    if (uniqueObjects.includes('person')) {
      strengths.push('–ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–≤—è–∑—å');
    }
    if (uniqueObjects.length > 3) {
      strengths.push('–ë–æ–≥–∞—Ç–æ–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ');
    }
    
    return strengths.length > 0 ? strengths : ['–£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –∏ –ø–æ–¥—Ö–æ–¥'];
  }

  private generateWeaknesses(videoData: VideoAnalysisData): string[] {
    const weaknesses: string[] = [];
    const { blurFrames, totalFrames, framesWithFaces, emotionStats } = videoData;
    
    if (blurFrames > totalFrames * 0.3) {
      weaknesses.push('–ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–æ–π —Å–Ω–∏–∂–∞—é—Ç –∫–∞—á–µ—Å—Ç–≤–æ');
    }
    if (framesWithFaces < totalFrames * 0.5) {
      weaknesses.push('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞');
    }
    if (emotionStats.sad > emotionStats.happy) {
      weaknesses.push('–ì—Ä—É—Å—Ç–Ω—ã–π —Ç–æ–Ω –º–æ–∂–µ—Ç —Å–Ω–∏–∑–∏—Ç—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å');
    }
    
    return weaknesses.length > 0 ? weaknesses : ['–ï—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞'];
  }

  private generateOpportunities(videoData: VideoAnalysisData): string[] {
    const opportunities: string[] = [];
    const { platform, contentType, uniqueObjects } = videoData;
    
    if (platform === 'tiktok') {
      opportunities.push('–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è –≤–∏—Ä—É—Å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è');
    }
    if (contentType === 'person-focused') {
      opportunities.push('–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞—Ç—å –ª–∏—á–Ω—ã–π –±—Ä–µ–Ω–¥');
    }
    if (uniqueObjects.includes('sky')) {
      opportunities.push('–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è travel-–∫–æ–Ω—Ç–µ–Ω—Ç–∞');
    }
    
    return opportunities.length > 0 ? opportunities : ['–ë–æ–ª—å—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞'];
  }

  private generateUniqueRecommendations(videoData: VideoAnalysisData): string[] {
    const recommendations: string[] = [];
    const { contentType, platform, emotionStats, qualityScore, uniqueObjects, colorStats, movementStats, lightingStats, compositionStats } = videoData;
    
    // –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤
    const dominantColor = Object.entries(colorStats).sort((a, b) => b[1] - a[1])[0]?.[0];
    if (dominantColor === 'neutral') {
      recommendations.push('üé® –°–æ–∑–¥–∞–π—Ç–µ —Ü–≤–µ—Ç–æ–≤–æ–π –≤–∑—Ä—ã–≤: –¥–æ–±–∞–≤—å—Ç–µ –Ω–µ–æ–Ω–æ–≤—ã–µ –∞–∫—Ü–µ–Ω—Ç—ã –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–Ω–∏–º–∞–Ω–∏—è');
    } else if (dominantColor === 'red') {
      recommendations.push('üî• –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—Ä–∞—Å–Ω—ã–π –∫–∞–∫ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä: —Å–æ–∑–¥–∞–π—Ç–µ –º–æ–º–µ–Ω—Ç—ã –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è –∏ —Å—Ç—Ä–∞—Å—Ç–∏');
    } else if (dominantColor === 'blue') {
      recommendations.push('üåä –°–∏–Ω–∏–π —Å–æ–∑–¥–∞–µ—Ç –¥–æ–≤–µ—Ä–∏–µ: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—â—É—â–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º–∞');
    } else if (dominantColor === 'green') {
      recommendations.push('üåø –ó–µ–ª–µ–Ω—ã–π —É—Å–ø–æ–∫–∞–∏–≤–∞–µ—Ç: —Å–æ–∑–¥–∞–π—Ç–µ –º–æ–º–µ–Ω—Ç—ã —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏ –∏ –ø—Ä–∏—Ä–æ–¥–Ω–æ–π –≥–∞—Ä–º–æ–Ω–∏–∏');
    }
    
    // –ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–≤–∏–∂–µ–Ω–∏—è
    if (movementStats.static > movementStats.dynamic) {
      recommendations.push('‚ö° –î–æ–±–∞–≤—å—Ç–µ –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫—É—é –¥–∏–Ω–∞–º–∏–∫—É: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–ª–∞–≤–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã –∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Ä–∞–∫—É—Ä—Å—ã');
    } else if (movementStats.dynamic > movementStats.static * 2) {
      recommendations.push('üéØ –°–æ–∑–¥–∞–π—Ç–µ –º–æ–º–µ–Ω—Ç—ã –ø–æ–∫–æ—è: –¥–æ–±–∞–≤—å—Ç–µ —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –∫–∞–¥—Ä—ã –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –∏ –±–∞–ª–∞–Ω—Å–∞');
    }
    
    // –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Å–≤–µ—â–µ–Ω–∏—è
    if (lightingStats.dark > lightingStats.good) {
      recommendations.push('‚ú® –°–æ–∑–¥–∞–π—Ç–µ –¥—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–µ —Ç–µ–Ω–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –≥–ª—É–±–∏–Ω—ã');
    } else if (lightingStats.bright > lightingStats.good) {
      recommendations.push('üåü –î–æ–±–∞–≤—å—Ç–µ –æ–±—ä–µ–º–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ: —Å–æ–∑–¥–∞–π—Ç–µ —Ç–µ–Ω–∏ –∏ –±–ª–∏–∫–∏ –¥–ª—è —Ç—Ä–µ—Ö–º–µ—Ä–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞');
    }
    
    // –ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
    if (compositionStats.ruleOfThirds < compositionStats.symmetry) {
      recommendations.push('üìê –†–∞–∑—Ä—É—à—å—Ç–µ —Å–∏–º–º–µ—Ç—Ä–∏—é: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–æ —Ç—Ä–µ—Ç–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏–∫–∏ –∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞');
    }
    
    // –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π
    if (contentType === 'person-focused' && emotionStats.happy > emotionStats.sad) {
      recommendations.push('üòä –°–æ–∑–¥–∞–π—Ç–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∏–∫–∏: –¥–æ–±–∞–≤—å—Ç–µ –∫—Ä—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã –∏—Å–∫—Ä–µ–Ω–Ω–∏—Ö —É–ª—ã–±–æ–∫ –∏ –º–æ–º–µ–Ω—Ç–æ–≤ —Ä–∞–¥–æ—Å—Ç–∏');
      recommendations.push('üé¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ—Ö–æ–¥—ã: —Å–æ–∑–¥–∞–π—Ç–µ –ø–ª–∞–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞–º–∏');
    } else if (contentType === 'person-focused' && emotionStats.sad > emotionStats.happy) {
      recommendations.push('üí´ –î–æ–±–∞–≤—å—Ç–µ –º–æ–º–µ–Ω—Ç—ã –∫–∞—Ç–∞—Ä—Å–∏—Å–∞: —Å–æ–∑–¥–∞–π—Ç–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫—É–ª—å–º–∏–Ω–∞—Ü–∏–∏ –∏ –º–æ–º–µ–Ω—Ç—ã –Ω–∞–¥–µ–∂–¥—ã');
      recommendations.push('üïØÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–ø–ª–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ: —Å–æ–∑–¥–∞–π—Ç–µ –æ—â—É—â–µ–Ω–∏–µ –±–ª–∏–∑–æ—Å—Ç–∏ –∏ —á–µ–ª–æ–≤–µ—á–Ω–æ—Å—Ç–∏');
    }
    
    // –ü–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    if (platform === 'tiktok') {
      recommendations.push('‚ö° –°–æ–∑–¥–∞–π—Ç–µ –≤–∑—Ä—ã–≤–Ω–æ–π —Ö—É–∫: –ø–µ—Ä–≤—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã –¥–æ–ª–∂–Ω—ã —à–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏ –∑–∞—Ü–µ–ø–∏—Ç—å –∑—Ä–∏—Ç–µ–ª—è');
      recommendations.push('üéµ –î–æ–±–∞–≤—å—Ç–µ –≤–∏—Ä—É—Å–Ω—ã–µ –∑–≤—É–∫–∏: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —Ç—Ä–µ–∫–∏ –∏ –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã');
      recommendations.push('üîÑ –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å: –¥–æ–±–∞–≤—å—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑—Ä–∏—Ç–µ–ª–∏ –∑–∞—Ö–æ—Ç—è—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å');
    } else if (platform === 'instagram') {
      recommendations.push('üì± –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –¥–ª—è –∫–≤–∞–¥—Ä–∞—Ç–∞: —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö');
      recommendations.push('üíé –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–µ–º–∏—É–º-—ç—Ñ—Ñ–µ–∫—Ç—ã: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã');
    } else if (platform === 'youtube') {
      recommendations.push('üéØ –°–æ–∑–¥–∞–π—Ç–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: –¥–æ–±–∞–≤—å—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–¥–µ—Ä–∂–∞—Ç –∑—Ä–∏—Ç–µ–ª—è –¥–æ –∫–æ–Ω—Ü–∞');
      recommendations.push('üìà –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–Ω–∞–ª–∏—Ç–∏–∫—É: —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –∞–ª–≥–æ—Ä–∏—Ç–º—É YouTube');
    }
    
    // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
    if (uniqueObjects.includes('person')) {
      recommendations.push('üëÅÔ∏è –°–æ–∑–¥–∞–π—Ç–µ –∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—Ä—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã –≥–ª–∞–∑ –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–≤—è–∑–∏');
    }
    if (uniqueObjects.includes('sky')) {
      recommendations.push('‚òÅÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ–±–æ –∫–∞–∫ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–æ–Ω: —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç –º–µ–∂–¥—É –∑–µ–º–Ω—ã–º –∏ –≤–æ–∑–≤—ã—à–µ–Ω–Ω—ã–º');
    }
    if (uniqueObjects.includes('vegetation')) {
      recommendations.push('üå± –°–æ–∑–¥–∞–π—Ç–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã —Ä–æ—Å—Ç–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏—Ä–æ–¥—É –∫–∞–∫ —Å–∏–º–≤–æ–ª —Ä–∞–∑–≤–∏—Ç–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π');
    }
    
    return recommendations.length > 0 ? recommendations : [
      'üé® –°–æ–∑–¥–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å: —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å —Ü–≤–µ—Ç–∞–º–∏, –∫–æ–º–ø–æ–∑–∏—Ü–∏–µ–π –∏ –¥–≤–∏–∂–µ–Ω–∏–µ–º',
      '‚ö° –î–æ–±–∞–≤—å—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ—Å—Ç–∏: —Å–æ–∑–¥–∞–π—Ç–µ –º–æ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–¥–∏–≤—è—Ç –∏ –∑–∞—Ü–µ–ø—è—Ç –∑—Ä–∏—Ç–µ–ª—è',
      'üí´ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—é –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è: —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–¥–µ–π—Å—Ç–≤—É–µ—Ç –Ω–∞ —ç–º–æ—Ü–∏–∏ –∑—Ä–∏—Ç–µ–ª—è'
    ];
  }

  private generatePersonalizedTips(videoData: VideoAnalysisData): string[] {
    const tips: string[] = [];
    const { platform, contentType, emotionStats, uniqueObjects, colorStats, movementStats } = videoData;
    
    // –ü–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
    if (platform === 'tiktok') {
      tips.push('üéµ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∏—Ä—É—Å–Ω—ã–µ –∑–≤—É–∫–∏: –¥–æ–±–∞–≤—å—Ç–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —Ç—Ä–µ–∫–∏ –∏ –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã');
      tips.push('‚ö° –°–æ–∑–¥–∞–π—Ç–µ —Å–µ—Ä–∏—é —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ cliffhangers –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏');
      tips.push('üîÑ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö: —Å–æ–∑–¥–∞–π—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥');
    } else if (platform === 'instagram') {
      tips.push('üì± –°–æ–∑–¥–∞–π—Ç–µ Instagram Stories: –¥–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –æ–ø—Ä–æ—Å—ã');
      tips.push('üíé –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Reels: —Å–æ–∑–¥–∞–π—Ç–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –º—É–∑—ã–∫–æ–π');
      tips.push('üé® –î–æ–±–∞–≤—å—Ç–µ IGTV: —Å–æ–∑–¥–∞–π—Ç–µ –¥–ª–∏–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–≥—Ä—É–∂–µ–Ω–∏—è');
    } else if (platform === 'youtube') {
      tips.push('üìà –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –¥–ª—è SEO: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö');
      tips.push('üéØ –°–æ–∑–¥–∞–π—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã: –≥—Ä—É–ø–ø–∏—Ä—É–π—Ç–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏');
      tips.push('üí¨ –í–∫–ª—é—á–∏—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: –∫–∞—Ä—Ç–æ—á–∫–∏, –∫–æ–Ω–µ—á–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã, –æ–ø—Ä–æ—Å—ã');
    }
    
    // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if (contentType === 'person-focused') {
      tips.push('üë§ –ü–æ–∫–∞–∂–∏—Ç–µ –∑–∞–∫—É–ª–∏—Å—å–µ: —Å–æ–∑–¥–∞–π—Ç–µ –æ—â—É—â–µ–Ω–∏–µ –±–ª–∏–∑–æ—Å—Ç–∏ —Å –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π');
      tips.push('üí≠ –î–æ–±–∞–≤—å—Ç–µ –ª–∏—á–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏ –∞–Ω–µ–∫–¥–æ—Ç—ã');
      tips.push('üé≠ –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: —Ä–∞–∑–≤–∏–≤–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—É—é –ª–∏—á–Ω–æ—Å—Ç—å –¥–ª—è –≤–∞—à–µ–≥–æ –±—Ä–µ–Ω–¥–∞');
    }
    
    // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –≤–∏–∑—É–∞–ª—å–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
    if (uniqueObjects.includes('sky')) {
      tips.push('üåÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ golden hour: —Å–æ–∑–¥–∞–π—Ç–µ –≤–æ–ª—à–µ–±–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è');
      tips.push('üë• –î–æ–±–∞–≤—å—Ç–µ –ª—é–¥–µ–π –≤ –ø–µ–π–∑–∞–∂–∏: —Å–æ–∑–¥–∞–π—Ç–µ –º–∞—Å—à—Ç–∞–± –∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç');
      tips.push('‚òÅÔ∏è –°–æ–∑–¥–∞–π—Ç–µ time-lapse: –ø–æ–∫–∞–∂–∏—Ç–µ –¥–∏–Ω–∞–º–∏–∫—É –ø—Ä–∏—Ä–æ–¥—ã –∏ –≤—Ä–µ–º–µ–Ω–∏');
    }
    
    // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ü–≤–µ—Ç–∞–º
    const dominantColor = Object.entries(colorStats).sort((a, b) => b[1] - a[1])[0]?.[0];
    if (dominantColor === 'neutral') {
      tips.push('üé® –î–æ–±–∞–≤—å—Ç–µ —Ü–≤–µ—Ç–æ–≤—ã–µ –∞–∫—Ü–µ–Ω—Ç—ã: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–Ω–∏–º–∞–Ω–∏—è');
    } else if (dominantColor === 'blue') {
      tips.push('üåä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–Ω–∏–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏: —Å–æ–∑–¥–∞–π—Ç–µ –æ—â—É—â–µ–Ω–∏–µ –¥–æ–≤–µ—Ä–∏—è –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏');
    }
    
    // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –¥–≤–∏–∂–µ–Ω–∏—é
    if (movementStats.static > movementStats.dynamic) {
      tips.push('‚ö° –î–æ–±–∞–≤—å—Ç–µ –¥–∏–Ω–∞–º–∏–∫—É: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–≤–∏–∂–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏');
    } else if (movementStats.dynamic > movementStats.static * 2) {
      tips.push('üéØ –°–æ–∑–¥–∞–π—Ç–µ –º–æ–º–µ–Ω—Ç—ã –ø–æ–∫–æ—è: –¥–æ–±–∞–≤—å—Ç–µ —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –∫–∞–¥—Ä—ã –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è');
    }
    
    return tips.length > 0 ? tips : [
      'üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ç—Ä–µ–Ω–¥—ã: —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏ –≤ –≤–∞—à–µ–π –Ω–∏—à–µ',
      'üéØ –ò–∑—É—á–∞–π—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é: –ø–æ–Ω–∏–º–∞–π—Ç–µ, —á—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è –≤–∞—à–∏–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º',
      'üí° –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ: –ø—Ä–æ–±—É–π—Ç–µ –Ω–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏ —Ç–µ—Ö–Ω–∏–∫–∏'
    ];
  }

  private generateCreativeSuggestions(videoData: VideoAnalysisData): string[] {
    const suggestions: string[] = [];
    const { contentType, platform, uniqueObjects, emotionStats, colorStats, movementStats } = videoData;
    
    // –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –∏–¥–µ–∏ –ø–æ —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if (contentType === 'person-focused') {
      suggestions.push('üé¨ –°–æ–∑–¥–∞–π—Ç–µ —Å–µ—Ä–∏—é "–î–µ–Ω—å –∏–∑ –∂–∏–∑–Ω–∏": –ø–æ–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏ —ç–º–æ—Ü–∏–∏');
      suggestions.push('üí¨ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç Q&A: –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –≤–∏–¥–µ–æ');
      suggestions.push('üé≠ –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: —Ä–∞–∑–≤–∏–≤–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—É—é –ª–∏—á–Ω–æ—Å—Ç—å –¥–ª—è –≤–∞—à–µ–≥–æ –±—Ä–µ–Ω–¥–∞');
      suggestions.push('üì± –°–Ω–∏–º–∏—Ç–µ —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Ç—Ä–µ–Ω–¥—ã: –ø–æ–∫–∞–∂–∏—Ç–µ —Å–≤–æ–µ –º–Ω–µ–Ω–∏–µ –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã');
    }
    
    // –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –∏–¥–µ–∏ –ø–æ –≤–∏–∑—É–∞–ª—å–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
    if (uniqueObjects.includes('sky')) {
      suggestions.push('‚òÅÔ∏è –°–æ–∑–¥–∞–π—Ç–µ time-lapse —Å –æ–±–ª–∞–∫–∞–º–∏: –ø–æ–∫–∞–∂–∏—Ç–µ –¥–∏–Ω–∞–º–∏–∫—É –ø—Ä–∏—Ä–æ–¥—ã');
      suggestions.push('üåç –°–Ω–∏–º–∏—Ç–µ –≤–∏–¥–µ–æ –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö: –ø–æ–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–Ω—ã–µ –º–µ—Å—Ç–∞ –∏ –∫—É–ª—å—Ç—É—Ä—ã');
      suggestions.push('üåÖ –°–æ–∑–¥–∞–π—Ç–µ —Å–µ—Ä–∏—é "–ù–µ–±–µ—Å–∞ –º–∏—Ä–∞": –ø–æ–∫–∞–∂–∏—Ç–µ –Ω–µ–±–æ –≤ —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö');
      suggestions.push('üå§Ô∏è –°–Ω–∏–º–∏—Ç–µ –ø–æ–≥–æ–¥–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: –ø–æ–∫–∞–∂–∏—Ç–µ –∫—Ä–∞—Å–æ—Ç—É –ø—Ä–∏—Ä–æ–¥—ã –≤ —Ä–∞–∑–Ω—É—é –ø–æ–≥–æ–¥—É');
    }
    
    // –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –∏–¥–µ–∏ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
    if (platform === 'tiktok') {
      suggestions.push('üî• –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö: —Å–æ–∑–¥–∞–π—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥');
      suggestions.push('üéµ –°–æ–∑–¥–∞–π—Ç–µ –∑–≤—É–∫–æ–≤–æ–π –±—Ä–µ–Ω–¥–∏–Ω–≥: —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—É—é –º—É–∑—ã–∫—É –¥–ª—è –≤–∏–¥–µ–æ');
      suggestions.push('‚ö° –°–æ–∑–¥–∞–π—Ç–µ —Å–µ—Ä–∏—é "–ë—ã—Å—Ç—Ä—ã–µ —Å–æ–≤–µ—Ç—ã": –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–æ–ª–µ–∑–Ω—ã–µ –≤–∏–¥–µ–æ');
      suggestions.push('üîÑ –°–Ω–∏–º–∏—Ç–µ "–î–æ –∏ –ø–æ—Å–ª–µ": –ø–æ–∫–∞–∂–∏—Ç–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è');
    } else if (platform === 'instagram') {
      suggestions.push('üì∏ –°–æ–∑–¥–∞–π—Ç–µ —Ñ–æ—Ç–æ-—Å–µ—Ä–∏—é: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ –≤–∏–¥–µ–æ —Å—Ç–∞—Ç–∏—á–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏');
      suggestions.push('üé® –°–Ω–∏–º–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è: –ø–æ–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∫–æ–Ω—Ç–µ–Ω—Ç');
      suggestions.push('üíé –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–µ–º–∏—É–º-–∫–æ–Ω—Ç–µ–Ω—Ç: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Å—Ç–∏–ª—å');
    } else if (platform === 'youtube') {
      suggestions.push('üìö –°–æ–∑–¥–∞–π—Ç–µ –æ–±—É—á–∞—é—â—É—é —Å–µ—Ä–∏—é: –¥–µ–ª–∏—Ç–µ—Å—å –∑–Ω–∞–Ω–∏—è–º–∏ –∏ –æ–ø—ã—Ç–æ–º');
      suggestions.push('üéØ –°–Ω–∏–º–∏—Ç–µ –æ–±–∑–æ—Ä—ã: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –º–µ—Å—Ç–∞ –∏–ª–∏ —Å–æ–±—ã—Ç–∏—è');
      suggestions.push('üí¨ –°–æ–∑–¥–∞–π—Ç–µ –¥–∏—Å–∫—É—Å—Å–∏–æ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –æ–±—Å—É–∂–¥–∞–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã');
    }
    
    // –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –∏–¥–µ–∏ –ø–æ —ç–º–æ—Ü–∏—è–º
    if (emotionStats.happy > emotionStats.sad) {
      suggestions.push('üòä –°–æ–∑–¥–∞–π—Ç–µ —Å–µ—Ä–∏—é "–ú–æ–º–µ–Ω—Ç—ã —Ä–∞–¥–æ—Å—Ç–∏": —Å–æ–±–∏—Ä–∞–π—Ç–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã');
      suggestions.push('üéâ –°–Ω–∏–º–∏—Ç–µ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –≤–∏–¥–µ–æ: —Å–æ–∑–¥–∞–π—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –≤–µ—Å–µ–ª—å—è');
      suggestions.push('üåü –°–æ–∑–¥–∞–π—Ç–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: –≤–¥–æ—Ö–Ω–æ–≤–ª—è–π—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é');
    } else if (emotionStats.sad > emotionStats.happy) {
      suggestions.push('üí´ –°–æ–∑–¥–∞–π—Ç–µ —Å–µ—Ä–∏—é "–ò—Å—Ç–æ—Ä–∏–∏ –Ω–∞–¥–µ–∂–¥—ã": –ø–æ–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π');
      suggestions.push('üïØÔ∏è –°–Ω–∏–º–∏—Ç–µ –º–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω—ã–µ –≤–∏–¥–µ–æ: —Å–æ–∑–¥–∞–π—Ç–µ —Å–ø–æ–∫–æ–π–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É');
      suggestions.push('üå± –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –æ —Ä–æ—Å—Ç–µ: –ø–æ–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è');
    }
    
    // –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –∏–¥–µ–∏ –ø–æ —Ü–≤–µ—Ç–∞–º
    const dominantColor = Object.entries(colorStats).sort((a, b) => b[1] - a[1])[0]?.[0];
    if (dominantColor === 'neutral') {
      suggestions.push('üé® –°–æ–∑–¥–∞–π—Ç–µ —Ü–≤–µ—Ç–æ–≤—É—é —Å–µ—Ä–∏—é: —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞–ª–∏—Ç—Ä–∞–º–∏');
      suggestions.push('üåà –°–Ω–∏–º–∏—Ç–µ —Ä–∞–¥—É–∂–Ω—ã–µ –≤–∏–¥–µ–æ: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å–µ —Ü–≤–µ—Ç–∞ —Å–ø–µ–∫—Ç—Ä–∞');
    } else if (dominantColor === 'blue') {
      suggestions.push('üåä –°–æ–∑–¥–∞–π—Ç–µ –º–æ—Ä—Å–∫—É—é —Å–µ—Ä–∏—é: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–Ω–∏–µ —Ç–æ–Ω–∞ –∏ –≤–æ–¥–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã');
      suggestions.push('üíô –°–Ω–∏–º–∏—Ç–µ —Å–ø–æ–∫–æ–π–Ω—ã–µ –≤–∏–¥–µ–æ: —Å–æ–∑–¥–∞–π—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É —É–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–∏—è');
    }
    
    // –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –∏–¥–µ–∏ –ø–æ –¥–≤–∏–∂–µ–Ω–∏—é
    if (movementStats.static > movementStats.dynamic) {
      suggestions.push('‚ö° –°–æ–∑–¥–∞–π—Ç–µ –¥–∏–Ω–∞–º–∏—á–Ω—É—é —Å–µ—Ä–∏—é: –¥–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –¥–≤–∏–∂–µ–Ω–∏—è –∏ —ç–Ω–µ—Ä–≥–∏–∏');
      suggestions.push('üé¨ –°–Ω–∏–º–∏—Ç–µ —ç–∫—à–Ω-–≤–∏–¥–µ–æ: –ø–æ–∫–∞–∂–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –¥–µ–π—Å—Ç–≤–∏–µ');
    } else if (movementStats.dynamic > movementStats.static * 2) {
      suggestions.push('üéØ –°–æ–∑–¥–∞–π—Ç–µ —Å–æ–∑–µ—Ä—Ü–∞—Ç–µ–ª—å–Ω—É—é —Å–µ—Ä–∏—é: –¥–æ–±–∞–≤—å—Ç–µ –º–æ–º–µ–Ω—Ç—ã –ø–æ–∫–æ—è –∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π');
      suggestions.push('üïäÔ∏è –°–Ω–∏–º–∏—Ç–µ –º–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω—ã–µ –≤–∏–¥–µ–æ: –ø–æ–∫–∞–∂–∏—Ç–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –∏ –≥–∞—Ä–º–æ–Ω–∏—é');
    }
    
    return suggestions.length > 0 ? suggestions : [
      'üé® –°–æ–∑–¥–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å: —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏',
      'üé≠ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–æ–≤—ã–µ –∂–∞–Ω—Ä—ã: –≤—ã–π–¥–∏—Ç–µ –∏–∑ –∑–æ–Ω—ã –∫–æ–º—Ñ–æ—Ä—Ç–∞',
      'üí° –°–æ–∑–¥–∞–π—Ç–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –ø—Ä–∏–¥—É–º–∞–π—Ç–µ —á—Ç–æ-—Ç–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–æ–≤–æ–µ',
      'üåü –°–Ω–∏–º–∏—Ç–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç: –º–æ—Ç–∏–≤–∏—Ä—É–π—Ç–µ –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–π—Ç–µ –¥—Ä—É–≥–∏—Ö'
    ];
  }

  private createContentPlanPrompt(userAnswers: UserAnswers): string {
    const goals = Array.isArray(userAnswers.goals) ? userAnswers.goals : [];
    const audience = typeof userAnswers.targetAudience === 'string' ? userAnswers.targetAudience : '';
    const platforms = Array.isArray(userAnswers.platforms) ? userAnswers.platforms : [];
    const contentType = typeof userAnswers.contentType === 'string' ? userAnswers.contentType : '';
    const style = typeof userAnswers.style === 'string' ? userAnswers.style : '';
    const budget = typeof userAnswers.budget === 'string' ? userAnswers.budget : '';
    const timeline = typeof userAnswers.timeline === 'string' ? userAnswers.timeline : '';
    const experience = typeof userAnswers.experience === 'string' ? userAnswers.experience : '';

    const daysCount = timeline === '1 –Ω–µ–¥–µ–ª—è' ? 7 : timeline === '1 –º–µ—Å—è—Ü' ? 30 : 90;

    return `–°–æ–∑–¥–∞–π –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞.

–¶–ï–õ–ò –ö–õ–ò–ï–ù–¢–ê: ${goals.join(', ')}
–¶–ï–õ–ï–í–ê–Ø –ê–£–î–ò–¢–û–†–ò–Ø: ${audience}
–ü–õ–ê–¢–§–û–†–ú–´: ${platforms.join(', ')}
–¢–ò–ü –ö–û–ù–¢–ï–ù–¢–ê: ${contentType}
–°–¢–ò–õ–¨ –ö–û–ù–¢–ï–ù–¢–ê: ${style}
–ë–Æ–î–ñ–ï–¢: ${budget}
–°–†–û–ö: ${timeline}
–û–ü–´–¢: ${experience}

–°–æ–∑–¥–∞–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ${daysCount} –¥–Ω–µ–π –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

–î–µ–Ω—å 1
–¢–µ–º–∞: [–∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –≤–∏–¥–µ–æ]
–ß—Ç–æ –≤–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å: [–æ–ø–∏—Å–∞–Ω–∏–µ —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ –≤–∏–¥–µ–æ]
–•—É–∫: [–∫–∞–∫ –∑–∞—Ü–µ–ø–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –≤ –ø–µ—Ä–≤—ã–µ —Å–µ–∫—É–Ω–¥—ã]
–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: [TikTok/Instagram/YouTube]
–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: [15 —Å–µ–∫/30 —Å–µ–∫/1 –º–∏–Ω/3 –º–∏–Ω]
–•–µ—à—Ç–µ–≥–∏: [#—Ö–µ—à—Ç–µ–≥1, #—Ö–µ—à—Ç–µ–≥2, #—Ö–µ—à—Ç–µ–≥3]

–î–µ–Ω—å 2
–¢–µ–º–∞: [–∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –≤–∏–¥–µ–æ]
–ß—Ç–æ –≤–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å: [–æ–ø–∏—Å–∞–Ω–∏–µ —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ –≤–∏–¥–µ–æ]
–•—É–∫: [–∫–∞–∫ –∑–∞—Ü–µ–ø–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –≤ –ø–µ—Ä–≤—ã–µ —Å–µ–∫—É–Ω–¥—ã]
–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: [TikTok/Instagram/YouTube]
–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: [15 —Å–µ–∫/30 —Å–µ–∫/1 –º–∏–Ω/3 –º–∏–Ω]
–•–µ—à—Ç–µ–≥–∏: [#—Ö–µ—à—Ç–µ–≥1, #—Ö–µ—à—Ç–µ–≥2, #—Ö–µ—à—Ç–µ–≥3]

–ò —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–ª—è –≤—Å–µ—Ö ${daysCount} –¥–Ω–µ–π.

–ë—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º. –ö–∞–∂–¥–æ–µ –≤–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ü–µ–ª—è–º –∫–ª–∏–µ–Ω—Ç–∞.`;
  }

  private parseContentPlanResponse(content: string): ContentPlan {
    try {
      console.log('üîÑ Parsing content plan response...');
      
      // –ü–∞—Ä—Å–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ
      const videoSchedule = this.parseVideoSchedule(content);
      console.log('üìÖ Parsed video schedule:', videoSchedule.length, 'days');
      
      return {
        title: '–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω',
        description: '–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤',
        goals: ['–£–≤–µ–ª–∏—á–∏—Ç—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å', '–†–∞—Å—à–∏—Ä–∏—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é', '–ü–æ–≤—ã—Å–∏—Ç—å —É–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç—å'],
        targetAudience: '–í–∞—à–∞ —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è',
        contentStrategy: '–°–º–µ—à–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç',
        platformStrategy: {
          TikTok: {
            contentTypes: ['–ö–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–¥–µ–æ', '–¢—Ä–µ–Ω–¥—ã', '–ß–µ–ª–ª–µ–Ω–¥–∂–∏'],
            postingSchedule: '2-3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å –≤ –ø–∏–∫–æ–≤—ã–µ —á–∞—Å—ã',
            optimizationTips: ['–ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–≤—É–∫–∏', '–°–æ–∑–¥–∞–≤–∞–π –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–¥–µ–æ']
          },
          Instagram: {
            contentTypes: ['–ü–æ—Å—Ç—ã', 'Stories', 'Reels'],
            postingSchedule: '1-2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å',
            optimizationTips: ['–ò—Å–ø–æ–ª—å–∑—É–π —Ö–µ—à—Ç–µ–≥–∏', '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–π —Å –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π']
          },
          YouTube: {
            contentTypes: ['–í–∏–¥–µ–æ', 'Shorts', 'Live —Å—Ç—Ä–∏–º—ã'],
            postingSchedule: '2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é',
            optimizationTips: ['–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –∑–∞–≥–æ–ª–æ–≤–∫–∏', '–°–æ–∑–¥–∞–≤–∞–π –ø–ª–µ–π–ª–∏—Å—Ç—ã']
          }
        },
        videoSchedule,
        contentIdeas: [
          '–î–Ω–µ–≤–Ω–∏–∫ –∏–∑ –∂–∏–∑–Ω–∏',
          '–û–±–∑–æ—Ä—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤',
          '–°–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏',
          '–ó–∞–∫—É–ª–∏—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç',
          '–ö–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ –∞–≤—Ç–æ—Ä–∞–º–∏'
        ],
        hashtagStrategy: ['#–≤–∞—à–±—Ä–µ–Ω–¥', '#—Ç—Ä–µ–Ω–¥', '#–∫–æ–Ω—Ç–µ–Ω—Ç', '#—Å–æ—Ü—Å–µ—Ç–∏'],
        engagementStrategy: [
          '–û—Ç–≤–µ—á–∞–π –Ω–∞ –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏',
          '–ü—Ä–æ–≤–æ–¥–∏ –æ–ø—Ä–æ—Å—ã –≤ Stories',
          '–°–æ–∑–¥–∞–≤–∞–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç',
          '–û—Ä–≥–∞–Ω–∏–∑—É–π –∫–æ–Ω–∫—É—Ä—Å—ã'
        ],
        measurementMetrics: ['–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–õ–∞–π–∫–∏', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', '–ü–æ–¥–ø–∏—Å—á–∏–∫–∏', '–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å'],
        timeline: {
          week1: ['–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤', '–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞', '–ò–∑—É—á–µ–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏'],
          week2: ['–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞', '–ê–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫', '–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏'],
          week3: ['–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞', '–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∏–¥–µ–π', '–ö–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏'],
          week4: ['–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞', '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞', '–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤']
        }
      };
    } catch (error) {
      console.error('‚ùå Error parsing content plan:', error);
      return this.createStructuredContentPlan(content);
    }
  }

  private parseVideoSchedule(content: string): VideoSchedule[] {
    console.log('üîÑ Parsing video schedule from content...');
    
    const schedule: VideoSchedule[] = [];
    const lines = content.split('\n');
    
    let currentDay = 0;
    let currentTopic = '';
    let currentWhatToShow = '';
    let currentHook = '';
    let currentPlatform = '';
    let currentDuration = '';
    let currentHashtags: string[] = [];
    
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      
      // –ò—â–µ–º –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –¥–Ω—è
      if (line.match(/^–î–µ–Ω—å\s+\d+/)) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å –µ—Å–ª–∏ –µ—Å—Ç—å
        if (currentDay > 0 && currentTopic) {
          schedule.push({
            day: currentDay,
            topic: currentTopic,
            whatToShow: currentWhatToShow,
            hook: currentHook,
            platform: currentPlatform,
            duration: currentDuration,
            hashtags: currentHashtags
          });
        }
        
        // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –¥–µ–Ω—å
        const dayMatch = line.match(/–î–µ–Ω—å\s+(\d+)/);
        currentDay = dayMatch ? parseInt(dayMatch[1]) : 0;
        currentTopic = '';
        currentWhatToShow = '';
        currentHook = '';
        currentPlatform = '';
        currentDuration = '';
        currentHashtags = [];
        
        console.log(`üìÖ Found day ${currentDay}`);
      }
      
      // –ü–∞—Ä—Å–∏–º –ø–æ–ª—è
      if (line.startsWith('–¢–µ–º–∞:')) {
        currentTopic = line.replace('–¢–µ–º–∞:', '').trim();
        console.log(`üìù Topic: ${currentTopic}`);
      } else if (line.startsWith('–ß—Ç–æ –≤–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å:')) {
        currentWhatToShow = line.replace('–ß—Ç–æ –≤–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å:', '').trim();
        console.log(`üé¨ What to show: ${currentWhatToShow}`);
      } else if (line.startsWith('–•—É–∫:')) {
        currentHook = line.replace('–•—É–∫:', '').trim();
        console.log(`üé£ Hook: ${currentHook}`);
      } else if (line.startsWith('–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:')) {
        currentPlatform = line.replace('–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:', '').trim();
        console.log(`üì± Platform: ${currentPlatform}`);
      } else if (line.startsWith('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:')) {
        currentDuration = line.replace('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:', '').trim();
        console.log(`‚è±Ô∏è Duration: ${currentDuration}`);
      } else if (line.startsWith('–•–µ—à—Ç–µ–≥–∏:')) {
        const hashtagsText = line.replace('–•–µ—à—Ç–µ–≥–∏:', '').trim();
        currentHashtags = hashtagsText.split(',').map(tag => tag.trim());
        console.log(`üè∑Ô∏è Hashtags: ${currentHashtags.join(', ')}`);
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
    if (currentDay > 0 && currentTopic) {
      schedule.push({
        day: currentDay,
        topic: currentTopic,
        whatToShow: currentWhatToShow,
        hook: currentHook,
        platform: currentPlatform,
        duration: currentDuration,
        hashtags: currentHashtags
      });
    }
    
    console.log(`‚úÖ Parsed ${schedule.length} days`);
    return schedule;
  }

  private createStructuredContentPlan(content: string): ContentPlan {
    return {
      title: '–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω',
      description: '–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤',
      goals: ['–£–≤–µ–ª–∏—á–∏—Ç—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å', '–†–∞—Å—à–∏—Ä–∏—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é', '–ü–æ–≤—ã—Å–∏—Ç—å —É–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç—å'],
      targetAudience: '–í–∞—à–∞ —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è',
      contentStrategy: '–°–º–µ—à–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç',
      platformStrategy: {
        TikTok: {
          contentTypes: ['–ö–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–¥–µ–æ', '–¢—Ä–µ–Ω–¥—ã', '–ß–µ–ª–ª–µ–Ω–¥–∂–∏'],
          postingSchedule: '2-3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å –≤ –ø–∏–∫–æ–≤—ã–µ —á–∞—Å—ã',
          optimizationTips: ['–ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–≤—É–∫–∏', '–°–æ–∑–¥–∞–≤–∞–π –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–¥–µ–æ']
        },
        Instagram: {
          contentTypes: ['–ü–æ—Å—Ç—ã', 'Stories', 'Reels'],
          postingSchedule: '1-2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å',
          optimizationTips: ['–ò—Å–ø–æ–ª—å–∑—É–π —Ö–µ—à—Ç–µ–≥–∏', '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–π —Å –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π']
        },
        YouTube: {
          contentTypes: ['–í–∏–¥–µ–æ', 'Shorts', 'Live —Å—Ç—Ä–∏–º—ã'],
          postingSchedule: '2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é',
          optimizationTips: ['–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –∑–∞–≥–æ–ª–æ–≤–∫–∏', '–°–æ–∑–¥–∞–≤–∞–π –ø–ª–µ–π–ª–∏—Å—Ç—ã']
        }
      },
      videoSchedule: this.generateLocalVideoSchedule({}),
      contentIdeas: [
        '–î–Ω–µ–≤–Ω–∏–∫ –∏–∑ –∂–∏–∑–Ω–∏',
        '–û–±–∑–æ—Ä—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤',
        '–°–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏',
        '–ó–∞–∫—É–ª–∏—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç',
        '–ö–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ –∞–≤—Ç–æ—Ä–∞–º–∏'
      ],
      hashtagStrategy: ['#–≤–∞—à–±—Ä–µ–Ω–¥', '#—Ç—Ä–µ–Ω–¥', '#–∫–æ–Ω—Ç–µ–Ω—Ç', '#—Å–æ—Ü—Å–µ—Ç–∏'],
      engagementStrategy: [
        '–û—Ç–≤–µ—á–∞–π –Ω–∞ –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏',
        '–ü—Ä–æ–≤–æ–¥–∏ –æ–ø—Ä–æ—Å—ã –≤ Stories',
        '–°–æ–∑–¥–∞–≤–∞–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç',
        '–û—Ä–≥–∞–Ω–∏–∑—É–π –∫–æ–Ω–∫—É—Ä—Å—ã'
      ],
      measurementMetrics: ['–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–õ–∞–π–∫–∏', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', '–ü–æ–¥–ø–∏—Å—á–∏–∫–∏', '–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å'],
      timeline: {
        week1: ['–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤', '–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞', '–ò–∑—É—á–µ–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏'],
        week2: ['–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞', '–ê–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫', '–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏'],
        week3: ['–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞', '–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∏–¥–µ–π', '–ö–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏'],
        week4: ['–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞', '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞', '–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤']
      }
    };
  }

  private generateLocalContentPlan(userAnswers: UserAnswers): ContentPlan {
    console.log('üîÑ Generating local content plan...');
    
    const goals = Array.isArray(userAnswers.goals) ? userAnswers.goals : ['–£–≤–µ–ª–∏—á–∏—Ç—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å'];
    const platforms = Array.isArray(userAnswers.platforms) ? userAnswers.platforms : ['TikTok'];
    const contentType = typeof userAnswers.contentType === 'string' ? userAnswers.contentType : '–í–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–Ω—Ç';
    
    return {
      title: '–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω',
      description: `–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è –≤ ${platforms.join(', ')} –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π`,
      goals: goals.length > 0 ? goals : ['–£–≤–µ–ª–∏—á–∏—Ç—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å', '–†–∞—Å—à–∏—Ä–∏—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é'],
      targetAudience: typeof userAnswers.targetAudience === 'string' ? userAnswers.targetAudience : '–í–∞—à–∞ —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è',
      contentStrategy: `–°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è ${contentType} —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ ${platforms.join(', ')}`,
      platformStrategy: this.generatePlatformStrategy(platforms),
      videoSchedule: this.generateLocalVideoSchedule(userAnswers),
      contentIdeas: this.generateContentIdeas(contentType, platforms),
      hashtagStrategy: ['#–≤–∞—à–±—Ä–µ–Ω–¥', '#—Ç—Ä–µ–Ω–¥', '#–∫–æ–Ω—Ç–µ–Ω—Ç'],
      engagementStrategy: ['–û—Ç–≤–µ—á–∞–π –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', '–ü—Ä–æ–≤–æ–¥–∏ –æ–ø—Ä–æ—Å—ã', '–°–æ–∑–¥–∞–≤–∞–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç'],
      measurementMetrics: ['–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–õ–∞–π–∫–∏', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', '–ü–æ–¥–ø–∏—Å—á–∏–∫–∏'],
      timeline: this.generateTimeline()
    };
  }

  private generateLocalVideoSchedule(userAnswers: UserAnswers): VideoSchedule[] {
    const platforms = Array.isArray(userAnswers.platforms) ? userAnswers.platforms : ['TikTok'];
    const style = typeof userAnswers.style === 'string' ? userAnswers.style : '–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π';
    
    // –ü—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏ –≤–∏—Ä—É—Å–Ω—ã–µ —Ö—É–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–≤–ª–µ—á–µ–Ω–∏—è
    const viralHooks = [
      '–ü–æ—á–µ–º—É —Ç—ã –∂–∏—Ä–Ω–∞—è? –ü–æ—Ç–æ–º—É —á—Ç–æ...',
      '–Ø —Å–¥–µ–ª–∞–ª –µ–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∞ –æ–Ω–∞...',
      '–ú–æ–π –ø–∞—Ä–µ–Ω—å —Å–∫–∞–∑–∞–ª –º–Ω–µ "—Ç—ã —Ç–æ–ª—Å—Ç–∞—è"...',
      '–ö–æ–≥–¥–∞ —Ç–≤–æ—è –º–∞–º–∞ —É–∑–Ω–∞–ª–∞ —á—Ç–æ —Ç—ã...',
      '–ü–æ—á–µ–º—É –≤—Å–µ –¥–µ–≤—É—à–∫–∏ –≤—ã–±–∏—Ä–∞—é—Ç –ø–ª–æ—Ö–∏—Ö –ø–∞—Ä–Ω–µ–π?',
      '–Ø –ø–æ—Ç—Ä–∞—Ç–∏–ª 1000$ –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫, –∞ –æ–Ω–∞...',
      '–ú–æ–π –±—ã–≤—à–∏–π –Ω–∞–ø–∏—Å–∞–ª –º–Ω–µ –ø–æ—Å–ª–µ 2 –ª–µ—Ç...',
      '–ü–æ—á–µ–º—É –ø–∞—Ä–Ω–∏ –Ω–µ –ª—é–±—è—Ç —É–º–Ω—ã—Ö –¥–µ–≤—É—à–µ–∫?',
      '–ö–æ–≥–¥–∞ —Ç–≤–æ–∏ –¥—Ä—É–∑—å—è —É–∑–Ω–∞–ª–∏ —á—Ç–æ —Ç—ã...',
      '–Ø –ø–æ–∫–∞–∑–∞–ª –º–∞–º–µ —Å–≤–æ–π TikTok –∏ –æ–Ω–∞...',
      '–ü–æ—á–µ–º—É –≤—Å–µ —Ö–æ—Ç—è—Ç –±—ã—Ç—å –∫–∞–∫ —è?',
      '–ú–æ–π –ø–∞—Ä–µ–Ω—å —Ä–µ–≤–Ω—É–µ—Ç –∫ –º–æ–∏–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º...',
      '–ö–æ–≥–¥–∞ —Ç–≤–æ—è –±–∞–±—É—à–∫–∞ —É–≤–∏–¥–µ–ª–∞ —Ç–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç...',
      '–ü–æ—á–µ–º—É —è –±—Ä–æ—Å–∏–ª–∞ —Ä–∞–±–æ—Ç—É —Ä–∞–¥–∏ TikTok?',
      '–ú–æ–π –±—ã–≤—à–∏–π –ø–æ–ø—Ä–æ—Å–∏–ª –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ—Å–ª–µ...',
      '–ü–æ—á–µ–º—É –≤—Å–µ –¥–µ–≤—É—à–∫–∏ —Ö–æ—Ç—è—Ç –±—ã—Ç—å —Ö—É–¥—ã–º–∏?',
      '–Ø —Ä–∞—Å—Å–∫–∞–∑–∞–ª–∞ –º–∞–º–µ –æ —Å–≤–æ–∏—Ö –¥–æ—Ö–æ–¥–∞—Ö...',
      '–ö–æ–≥–¥–∞ —Ç–≤–æ–∏ –¥—Ä—É–∑—å—è —É–∑–Ω–∞–ª–∏ —Ç–≤–æ—é –∑–∞—Ä–ø–ª–∞—Ç—É...',
      '–ü–æ—á–µ–º—É –ø–∞—Ä–Ω–∏ –±–æ—è—Ç—Å—è —Å–∏–ª—å–Ω—ã—Ö –∂–µ–Ω—â–∏–Ω?',
      '–ú–æ–π –ø–∞—Ä–µ–Ω—å —Å–∫–∞–∑–∞–ª —á—Ç–æ —è —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–Ω–∏–º–∞—é...',
      '–ü–æ—á–µ–º—É –≤—Å–µ —Ö–æ—Ç—è—Ç –±—ã—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏?',
      '–Ø –ø–æ–∫–∞–∑–∞–ª–∞ –ø–∞–ø–µ —Å–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –æ–Ω...',
      '–ö–æ–≥–¥–∞ —Ç–≤–æ—è —Å–µ—Å—Ç—Ä–∞ —É–∑–Ω–∞–ª–∞ —Ç–≤–æ–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã...',
      '–ü–æ—á–µ–º—É –≤—Å–µ –∫–æ–ø–∏—Ä—É—é—Ç –º–æ–π —Å—Ç–∏–ª—å?',
      '–ú–æ–π –±—ã–≤—à–∏–π –Ω–∞–ø–∏—Å–∞–ª –º–Ω–µ –≤ TikTok...',
      '–ü–æ—á–µ–º—É –¥–µ–≤—É—à–∫–∏ –≤—Å–µ–≥–¥–∞ –ø—Ä–∞–≤—ã?',
      '–Ø —Ä–∞—Å—Å–∫–∞–∑–∞–ª–∞ –¥—Ä—É–∑—å—è–º –æ —Å–≤–æ–∏—Ö –ø–ª–∞–Ω–∞—Ö...',
      '–ö–æ–≥–¥–∞ —Ç–≤–æ—è –º–∞–º–∞ —É–≤–∏–¥–µ–ª–∞ —Ç–≤–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏...',
      '–ü–æ—á–µ–º—É –≤—Å–µ —Ö–æ—Ç—è—Ç –±—ã—Ç—å –∫–∞–∫ —Ç—ã?'
    ];
    
    const videoTemplates = [
      {
        topic: '–ü—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–Ω—è',
        whatToShow: '–ó–∞–¥–∞—é –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏ –ø–æ–∫–∞–∑—ã–≤–∞—é —Ä–µ–∞–∫—Ü–∏—é',
        hook: viralHooks[0],
        duration: '30 —Å–µ–∫',
        hashtags: ['#–ø—Ä–æ–≤–æ–∫–∞—Ü–∏—è', '#–≤–æ–ø—Ä–æ—Å', '#—Ä–µ–∞–∫—Ü–∏—è', '#–≤–∏—Ä—É—Å']
      },
      {
        topic: '–ò—Å—Ç–æ—Ä–∏—è –∏–∑ –∂–∏–∑–Ω–∏',
        whatToShow: '–†–∞—Å—Å–∫–∞–∑—ã–≤–∞—é —Ä–µ–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º –ø–æ–≤–æ—Ä–æ—Ç–æ–º',
        hook: viralHooks[1],
        duration: '45 —Å–µ–∫',
        hashtags: ['#–∏—Å—Ç–æ—Ä–∏—è', '#–∂–∏–∑–Ω—å', '#–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ', '#–≤–∏—Ä—É—Å']
      },
      {
        topic: '–†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏',
        whatToShow: '–ß–∏—Ç–∞—é –∏ —Ä–µ–∞–≥–∏—Ä—É—é –Ω–∞ –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏',
        hook: viralHooks[2],
        duration: '25 —Å–µ–∫',
        hashtags: ['#–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', '#—Ä–µ–∞–∫—Ü–∏—è', '#–ø—Ä–æ–≤–æ–∫–∞—Ü–∏—è', '#–≤–∏—Ä—É—Å']
      },
      {
        topic: '–°–µ–∫—Ä–µ—Ç—ã —É—Å–ø–µ—Ö–∞',
        whatToShow: '–†–∞—Å–∫—Ä—ã–≤–∞—é —Å–µ–∫—Ä–µ—Ç—ã —Å–≤–æ–µ–≥–æ —É—Å–ø–µ—Ö–∞ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö',
        hook: viralHooks[3],
        duration: '40 —Å–µ–∫',
        hashtags: ['#—Å–µ–∫—Ä–µ—Ç—ã', '#—É—Å–ø–µ—Ö', '#—Ä–∞—Å–∫—Ä—ã—Ç–∏–µ', '#–≤–∏—Ä—É—Å']
      },
      {
        topic: '–ü—Ä–∞–≤–¥–∞ –æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏',
        whatToShow: '–ì–æ–≤–æ—Ä—é –ø—Ä–∞–≤–¥—É –æ —Ç–æ–º, —á—Ç–æ –∑–Ω–∞—á–∏—Ç –±—ã—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º',
        hook: viralHooks[4],
        duration: '35 —Å–µ–∫',
        hashtags: ['#–ø—Ä–∞–≤–¥–∞', '#–ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å', '#–æ—Ç–∫—Ä–æ–≤–µ–Ω–∏–µ', '#–≤–∏—Ä—É—Å']
      },
      {
        topic: '–°–æ–≤–µ—Ç—ã –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞',
        whatToShow: '–î–∞–º —Å–æ–≤–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∏–∫—Ç–æ –Ω–µ —Ö–æ—á–µ—Ç —Å–ª—ã—à–∞—Ç—å',
        hook: viralHooks[5],
        duration: '30 —Å–µ–∫',
        hashtags: ['#—Å–æ–≤–µ—Ç—ã', '#—ç–∫—Å–ø–µ—Ä—Ç', '#–ø—Ä–∞–≤–¥–∞', '#–≤–∏—Ä—É—Å']
      },
      {
        topic: '–ó–∞–∫—É–ª–∏—Å–Ω–∞—è –ø—Ä–∞–≤–¥–∞',
        whatToShow: '–ü–æ–∫–∞–∑—ã–≤–∞—é —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–∞ –∫–∞–¥—Ä–æ–º',
        hook: viralHooks[6],
        duration: '50 —Å–µ–∫',
        hashtags: ['#–∑–∞–∫—É–ª–∏—Å—å–µ', '#–ø—Ä–∞–≤–¥–∞', '#—Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å', '#–≤–∏—Ä—É—Å']
      }
    ];
    
    return videoTemplates.map((template, index) => {
      const platform = platforms[index % platforms.length];
      const hookIndex = index % viralHooks.length;
      
      return {
        day: index + 1,
        topic: template.topic,
        whatToShow: template.whatToShow,
        hook: viralHooks[hookIndex],
        platform,
        duration: template.duration,
        hashtags: template.hashtags
      };
    });
  }

  private generatePlatformStrategy(platforms: string[]) {
    const strategy: any = {};
    
    platforms.forEach(platform => {
      switch (platform.toLowerCase()) {
        case 'tiktok':
          strategy.TikTok = {
            contentTypes: ['–ö–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–¥–µ–æ', '–¢—Ä–µ–Ω–¥—ã', '–ß–µ–ª–ª–µ–Ω–¥–∂–∏'],
            postingSchedule: '2-3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å',
            optimizationTips: ['–ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–≤—É–∫–∏', '–°–æ–∑–¥–∞–≤–∞–π –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–¥–µ–æ']
          };
          break;
        case 'instagram':
          strategy.Instagram = {
            contentTypes: ['–ü–æ—Å—Ç—ã', 'Stories', 'Reels'],
            postingSchedule: '1-2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å',
            optimizationTips: ['–ò—Å–ø–æ–ª—å–∑—É–π —Ö–µ—à—Ç–µ–≥–∏', '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–π —Å –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π']
          };
          break;
        case 'youtube':
          strategy.YouTube = {
            contentTypes: ['–í–∏–¥–µ–æ', 'Shorts', 'Live —Å—Ç—Ä–∏–º—ã'],
            postingSchedule: '2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é',
            optimizationTips: ['–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –∑–∞–≥–æ–ª–æ–≤–∫–∏', '–°–æ–∑–¥–∞–≤–∞–π –ø–ª–µ–π–ª–∏—Å—Ç—ã']
          };
          break;
        default:
          strategy[platform] = {
            contentTypes: ['–ö–æ–Ω—Ç–µ–Ω—Ç'],
            postingSchedule: '1 —Ä–∞–∑ –≤ –¥–µ–Ω—å',
            optimizationTips: ['–ò–∑—É—á–∞–π –∞—É–¥–∏—Ç–æ—Ä–∏—é', '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–µ—Ç—Ä–∏–∫–∏']
          };
      }
    });
    
    return strategy;
  }

  private generateContentIdeas(contentType: string, platforms: string[]): string[] {
    const ideas = [
      '–î–Ω–µ–≤–Ω–∏–∫ –∏–∑ –∂–∏–∑–Ω–∏',
      '–û–±–∑–æ—Ä—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤',
      '–°–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏',
      '–ó–∞–∫—É–ª–∏—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç',
      '–ö–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ –∞–≤—Ç–æ—Ä–∞–º–∏'
    ];
    
    if (contentType.toLowerCase().includes('–≤–∏–¥–µ–æ')) {
      ideas.push('–¢—É—Ç–æ—Ä–∏–∞–ª—ã', '–†–µ–∞–∫—Ü–∏–∏', '–ß–µ–ª–ª–µ–Ω–¥–∂–∏');
    }
    
    if (platforms.some(p => p.toLowerCase().includes('tiktok'))) {
      ideas.push('–¢—Ä–µ–Ω–¥–æ–≤—ã–µ –≤–∏–¥–µ–æ', '–ó–≤—É–∫–æ–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã');
    }
    
    return ideas;
  }

  private generateTimeline() {
    return {
      week1: ['–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤', '–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞', '–ò–∑—É—á–µ–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏'],
      week2: ['–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞', '–ê–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫', '–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏'],
      week3: ['–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞', '–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∏–¥–µ–π', '–ö–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏'],
      week4: ['–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞', '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞', '–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤']
    };
  }
}

export const aiService = new AIService(); 